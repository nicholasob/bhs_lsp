[
  {
     "name":"place_building",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"build_type",
           "type":"string"
        },
        {
           "name":"city_name",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 for city buildings that already exist in the city, 0 for non-city buildings or city buildings that do not exist, -1 if failed.",
        "type":"int"
     },
     "description":"Gives the AI an order to place a building type at a specified city. Useful for AI scripts and any scripted AI in a scenario.",
     "notes":""
  },
  {
     "name":"place_building_upgrade",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"build_type",
           "type":"string"
        },
        {
           "name":"city_name",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 for city buildings that already exist in the city, 0 for non-city buildings or city buildings that do not exist, -1 if failed.",
        "type":"int"
     },
     "description":"Gives the AI an order to place a building type at a specified city. Useful for AI scripts and any scripted AI in a scenario.",
     "notes":"works the same as place_building, except the AI places the current upgrade of the building."
  },
  {
     "name":"place_building_upgrade_with_cost",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"build_type",
           "type":"string"
        },
        {
           "name":"city_name",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 for city buildings that already exist in the city, 0 for non-city buildings or city buildings that do not exist, -1 if failed.",
        "type":"int"
     },
     "description":"Gives the AI an order to place a building type at a specified city. Useful for AI scripts and any scripted AI in a scenario.",
     "notes":"works the same as place_building, except the AI places the current upgrade of the building once there are enough resources to pay for it."
  },
  {
     "name":"place_building_with_cost",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"build_type",
           "type":"string"
        },
        {
           "name":"city_name",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 for city buildings that already exist in the city, 0 for non-city buildings or city buildings that do not exist, -1 if failed.",
        "type":"int"
     },
     "description":"Gives the AI an order to place a building type at a specified city. Useful for AI scripts and any scripted AI in a scenario.",
     "notes":"works the same as place_building, except the AI places the building once there are enough resources to pay for it."
  },
  {
     "name":"place_city_with_cost",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if AI is able to place a city with the cost, 0 if it does not have the resources to place a city, -1 it is unable to place any more cities or if it failed.",
        "type":"int"
     },
     "description":"Gives the AI an order to place a city once it has enough to pay for it. Useful for AI scripts and any scripted AI in a scenario..",
     "notes":""
  },
  {
     "name":"place_orphan_building",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"build_type",
           "type":"string"
        },
        {
           "name":"build_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 for city buildings that already exist in the city, 0 for non-city buildings or city buildings that do not exist, -1 if failed.",
        "type":"int"
     },
     "description":"Gives the AI an order to place a building type near a specified building. Useful for AI scripts and any scripted AI in a scenario.",
     "notes":""
  },
  {
     "name":"place_orphan_building_upgrade",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"build_type",
           "type":"string"
        },
        {
           "name":"build_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 for city buildings that already exist in the city, 0 for non-city buildings or city buildings that do not exist, -1 if failed.",
        "type":"int"
     },
     "description":"Gives the AI an order to place a building type near a specified building. Useful for AI scripts and any scripted AI in a scenario.",
     "notes":"works the same as place_orphan_building , except the AI places the current upgrade of the building."
  },
  {
     "name":"place_orphan_building_upgrade_with_cost",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"build_type",
           "type":"string"
        },
        {
           "name":"build_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 for city buildings that already exist in the city, 0 for non-city buildings or city buildings that do not exist, -1 if failed.",
        "type":"int"
     },
     "description":"Gives the AI an order to place a building type near a specified building. Useful for AI scripts and any scripted AI in a scenario.",
     "notes":"works the same as place_orphan_building, except the AI places the current upgrade of the building once there are enough resources to pay for it."
  },
  {
     "name":"place_orphan_building_with_cost",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"build_type",
           "type":"string"
        },
        {
           "name":"build_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 for city buildings that already exist in the city, 0 for non-city buildings or city buildings that do not exist, -1 if failed.",
        "type":"int"
     },
     "description":"Gives the AI an order to place a building type near a specified building. Useful for AI scripts and any scripted AI in a scenario.",
     "notes":"works the same as place_orphan_building, except the AI places the building once there are enough resources to pay for it."
  },
  {
     "name":"play_sound",
     "arguments":[
        {
           "name":"sound",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Plays a sound on all machines. The script looks for sound files (.wav extension) in the directory the script file is located. Useful in scenarios to help signify events or messages.",
     "notes":""
  },
  {
     "name":"play_sound_to",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"sound",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Plays a sound to one player only. The script looks for sound files (.wav extension) in the directory the script file is located. Useful in scenarios to help signify events or messages.",
     "notes":""
  },
  {
     "name":"set_music_mood",
     "arguments":[
        {
           "name":"mood",
           "type":"string"
        },
        {
           "name":"bool_immediately",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Changes the music playing to a certain type of mood. Useful in scenarios to help signify how the game is going.",
     "notes":""
  },
  {
     "name":"set_music_volume",
     "arguments":[
        {
           "name":"percent",
           "type":"int"
        }
     ],
     "return":{
        
     },
     "description":"Plays a sound to one player only. Useful in scenarios to tone down the music in order to emphasize something else.",
     "notes":""
  },
  {
     "name":"sound_finished",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Checks to see if no sound is playing. Useful in scenarios to make sure nothing will play at the same time as a when a scripted sound is played.",
     "notes":""
  },
  {
     "name":"stop_sound",
     "arguments":[
        
     ],
     "return":{
        
     },
     "description":"Stops whatever sound is playing. Useful in scenarios to clear any sounds from playing in order to play a scripted sound.",
     "notes":""
  },
  {
     "name":"building_active",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"build_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Triggered if a building has been fully constructed.",
     "notes":""
  },
  {
     "name":"building_destroyed",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"build_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Triggered if a building has been fully constructed.",
     "notes":"works the same as building_active , except it finds if a building has been destroyed."
  },
  {
     "name":"building_full",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"build_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Triggered if a building has been fully constructed.",
     "notes":"works the same as building_active, except it finds if a building is fully garrisoned."
  },
  {
     "name":"building_started",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"build_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Triggered if a building has been fully constructed.",
     "notes":"works the same as building_active, except it finds if construction has begun on a building."
  },
  {
     "name":"building_type_destroyed",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"build_type",
           "type":"string"
        }
     ],
     "return":{
        "name":"The number of buildings of the specified type destroyed since the last check if true, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Triggered when a building type has been destroyed.",
     "notes":""
  },
  {
     "name":"clear_build_queue",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"build_o",
           "type":"int"
        },
        {
           "name":"bool_unpay_cost",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Clears the build queue at a building. Also determines if the player gets their resources back or not.",
     "notes":""
  },
  {
     "name":"get_rally_x",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"build_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"The world X position of the rally point if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds the world X position of a rally point from a building.",
     "notes":""
  },
  {
     "name":"get_rally_y",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"build_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"The world X position of the rally point if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds the world X position of a rally point from a building.",
     "notes":"works the same as get_rally_x, except it finds the game world Y position."
  },
  {
     "name":"is_city",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"build_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if a building is a city.",
     "notes":""
  },
  {
     "name":"is_civilian_building",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"build_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if a building is a city.",
     "notes":"works the same as is_city , except it finds if a building is a civilian building."
  },
  {
     "name":"is_military_building",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"build_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if a building is a city.",
     "notes":"works the same as is_city, except it finds if a building is a military building."
  },
  {
     "name":"is_rally_set",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"build_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if a building has a rally point set.",
     "notes":""
  },
  {
     "name":"max_workers_at_building",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"build_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"The number of max workers that can work at a building if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds the max number of workers that can work at a building.",
     "notes":""
  },
  {
     "name":"num_garrisoned_in",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"build_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"The number of garrisoned units if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds how many units are garrisoned in a building or unit.",
     "notes":""
  },
  {
     "name":"num_type_queued",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"build_o",
           "type":"int"
        },
        {
           "name":"unit_type",
           "type":"string"
        }
     ],
     "return":{
        "name":"The number of units queued if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds how many units of a type are queued at a building.",
     "notes":""
  },
  {
     "name":"num_workers_at_building",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"build_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"The number of workers at a building if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds the number of workers at a building.",
     "notes":""
  },
  {
     "name":"camera_x",
     "arguments":[
        
     ],
     "return":{
        "name":"The game world X position of the camera if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds the current game world X position of the camera.",
     "notes":""
  },
  {
     "name":"camera_y",
     "arguments":[
        
     ],
     "return":{
        "name":"The game world X position of the camera if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds the current game world X position of the camera.",
     "notes":"works the same as camera_x , except it finds the game world Y position."
  },
  {
     "name":"center_camera_on",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"object_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Centers the camera on an object.",
     "notes":""
  },
  {
     "name":"get_camera_x",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"object_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Centers the camera on an object.",
     "notes":"works the same as camera_x ()."
  },
  {
     "name":"get_camera_y",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"object_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Centers the camera on an object.",
     "notes":"works the same as camera_x, except it finds the game world Y position."
  },
  {
     "name":"get_current_zoom",
     "arguments":[
        
     ],
     "return":{
        "name":"Returns a 4, 5, or 6 as noted above if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds the current zoom level.",
     "notes":""
  },
  {
     "name":"is_camera_panning",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Checks to see if the camera is panning due to hotkeys.",
     "notes":""
  },
  {
     "name":"jump_camera",
     "arguments":[
        {
           "name":"x",
           "type":"int"
        },
        {
           "name":"y",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Jumps the camera to a new location.",
     "notes":""
  },
  {
     "name":"move_camera",
     "arguments":[
        {
           "name":"x",
           "type":"int"
        },
        {
           "name":"y",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Jumps the camera to a new location.",
     "notes":"works the same as jump_camera, except it moves the camera over the map instead of jumping it."
  },
  {
     "name":"scrolling_lock",
     "arguments":[
        {
           "name":"x",
           "type":"int"
        },
        {
           "name":"y",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Jumps the camera to a new location.",
     "notes":"combines what scrolling_lock_manual, scrolling_lock_minimap () and scrolling_lock_shortcuts () do into one function."
  },
  {
     "name":"scrolling_lock_manual",
     "arguments":[
        
     ],
     "return":{
        
     },
     "description":"Disables the ability to scroll around the screen by moving the mouse to the edge.",
     "notes":""
  },
  {
     "name":"scrolling_lock_minimap",
     "arguments":[
        
     ],
     "return":{
        
     },
     "description":"Disables the ability to scroll around the map using the mini-map.",
     "notes":""
  },
  {
     "name":"scrolling_lock_shortcuts",
     "arguments":[
        
     ],
     "return":{
        
     },
     "description":"Disables the ability to scroll to objects using hotkey shortcuts.",
     "notes":""
  },
  {
     "name":"scrolling_unlock",
     "arguments":[
        
     ],
     "return":{
        
     },
     "description":"Disables the ability to scroll to objects using hotkey shortcuts.",
     "notes":"works the same as scrolling_lock, except it allows the user to scroll around the map by moving the mouse to the edge of the screen, using the mini-map, or using hotkeys."
  },
  {
     "name":"scrolling_unlock_manual",
     "arguments":[
        
     ],
     "return":{
        
     },
     "description":"Disables the ability to scroll to objects using hotkey shortcuts.",
     "notes":"works the same as scrolling_lock_manual, except it allows the user to scroll around the map by moving the mouse to the edge of the screen."
  },
  {
     "name":"scrolling_unlock_minimap",
     "arguments":[
        
     ],
     "return":{
        
     },
     "description":"Disables the ability to scroll to objects using hotkey shortcuts.",
     "notes":"works the same as scrolling_lock_minimap, except it allows the user to scroll around the map using the mini-map."
  },
  {
     "name":"scrolling_unlock_shortcuts",
     "arguments":[
        
     ],
     "return":{
        
     },
     "description":"Disables the ability to scroll to objects using hotkey shortcuts.",
     "notes":"works the same as scrolling_lock_shortcuts, except it allows the user to scroll around the map using hotkeys."
  },
  {
     "name":"zoom_in",
     "arguments":[
        {
           "name":"x",
           "type":"int"
        },
        {
           "name":"y",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Zooms the camera fully in on a certain location.",
     "notes":""
  },
  {
     "name":"zoom_in_on",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"object_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Zooms the camera fully in on an object.",
     "notes":""
  },
  {
     "name":"zoom_out",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"object_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Zooms the camera fully in on an object.",
     "notes":"works the same as zoom_in, except it zooms the camera fully out over a certain game world location."
  },
  {
     "name":"zoom_out_on",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"object_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Zooms the camera fully in on an object.",
     "notes":"works the same as zoom_in_on, except it zooms the camera fully out over a certain object."
  },
  {
     "name":"zooming_lock",
     "arguments":[
        
     ],
     "return":{
        
     },
     "description":"Locks the zoom level to the current zoom level.",
     "notes":""
  },
  {
     "name":"zooming_unlock",
     "arguments":[
        
     ],
     "return":{
        
     },
     "description":"Locks the zoom level to the current zoom level.",
     "notes":"works the opposite of zooming_lock, allowing the user to zoom at different levels."
  },
  {
     "name":"chat",
     "arguments":[
        {
           "name":"who_to",
           "type":"int"
        },
        {
           "name":"who_from",
           "type":"int"
        },
        {
           "name":"message",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Sends a chat message from one player to another.",
     "notes":""
  },
  {
     "name":"chat_all",
     "arguments":[
        {
           "name":"who_from",
           "type":"int"
        },
        {
           "name":"message",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Sends a chat message from one player to all other players.",
     "notes":""
  },
  {
     "name":"city_alarm_sounded",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"city_name",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Checks if the city alarm is sounding.",
     "notes":""
  },
  {
     "name":"city_assimilate",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"city_name",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Instantly assimilates a city that has been captured.",
     "notes":""
  },
  {
     "name":"city_assimilated_by",
     "arguments":[
        {
           "name":"who_defend",
           "type":"int"
        },
        {
           "name":"who_attack",
           "type":"int"
        },
        {
           "name":"city_name",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if a player assimilated a city.",
     "notes":""
  },
  {
     "name":"city_being_assimilated",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"city_name",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if a player is assimilating a city.",
     "notes":""
  },
  {
     "name":"city_captured",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"city_name",
           "type":"string"
        }
     ],
     "return":{
        "name":"}",
        "type":"int"
     },
     "description":"Finds if a city has been captured. Pass in a blank string (\u201c\u201d) to find if any city has been captured.",
     "notes":""
  },
  {
     "name":"city_captured_by",
     "arguments":[
        {
           "name":"who_defend",
           "type":"int"
        },
        {
           "name":"who_attack",
           "type":"int"
        },
        {
           "name":"city_name",
           "type":"string"
        }
     ],
     "return":{
        "name":"}",
        "type":"int"
     },
     "description":"Finds if a player has lost a city to another player. Pass in a blank string (\u201c\u201d) to find if a player has lost any cities to another player.",
     "notes":""
  },
  {
     "name":"city_exists",
     "arguments":[
        {
           "name":"city_name",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if a city exists.",
     "notes":""
  },
  {
     "name":"city_id_captured",
     "arguments":[
        {
           "name":"city_name",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if a city exists.",
     "notes":"works the same as city_captured, except it uses a build_o (a building ID, integer value) as its second parameter instead of city_name."
  },
  {
     "name":"find_city_id",
     "arguments":[
        {
           "name":"city_name",
           "type":"string"
        }
     ],
     "return":{
        "name":"The building ID if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds the building ID of a city.",
     "notes":""
  },
  {
     "name":"find_city_name",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"A city name if true or success, 0 if false, -1 if failed.",
        "type":"string"
     },
     "description":"Finds a city name. Cycles through a player\u2019s cities on repeated calls.",
     "notes":""
  },
  {
     "name":"find_city_owner",
     "arguments":[
        {
           "name":"city_name",
           "type":"string"
        }
     ],
     "return":{
        "name":"A number from 1-8 (representing player number) if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds the owner of a city.",
     "notes":""
  },
  {
     "name":"find_city_with_num",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"city_num",
           "type":"int"
        }
     ],
     "return":{
        "name":"A building ID if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds the building ID of a city by number built (i.e. capital is 1, second city is 2, etc.).",
     "notes":""
  },
  {
     "name":"get_city_level",
     "arguments":[
        {
           "name":"city_name",
           "type":"string"
        }
     ],
     "return":{
        "name":"The city level number (1, 2 or 3) if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds the level of a city.",
     "notes":""
  },
  {
     "name":"num_city_buildings",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"city_name",
           "type":"string"
        },
        {
           "name":"build_type",
           "type":"string"
        },
        {
           "name":"bool_count_inactive",
           "type":"int"
        }
     ],
     "return":{
        "name":"The number of buildings of a type at a city a player has if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds the number of a type of building a player has at a city.",
     "notes":""
  },
  {
     "name":"at_least_age",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"age",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Triggered by a player reaching a certain age.",
     "notes":""
  },
  {
     "name":"at_least_buildings",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"num",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Triggered by a player having a certain number of buildings.",
     "notes":""
  },
  {
     "name":"at_least_cities",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"num",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Triggered by a player having a certain number of buildings.",
     "notes":"works the same as at_least_buildings () , except that it is triggered by a certain number of Cities."
  },
  {
     "name":"at_least_civilian_buildings",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"num",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Triggered by a player having a certain number of buildings.",
     "notes":"works the same as at_least_buildings () , except that it is triggered by a certain number of civilian buildings."
  },
  {
     "name":"at_least_civilian_units",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"num",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Triggered by a player having a certain number of buildings.",
     "notes":"works the same as at_least_buildings () , except that it is triggered by a certain number of civilian units."
  },
  {
     "name":"at_least_gather_rate",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"num",
           "type":"int"
        },
        {
           "name":"res_type",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Triggered by a player having a certain gather rate.",
     "notes":""
  },
  {
     "name":"at_least_military_buildings",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"num",
           "type":"int"
        },
        {
           "name":"res_type",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Triggered by a player having a certain gather rate.",
     "notes":"works the same as at_least_buildings () , except that it is triggered by a certain number of military buildings"
  },
  {
     "name":"at_least_military_units",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"num",
           "type":"int"
        },
        {
           "name":"res_type",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Triggered by a player having a certain gather rate.",
     "notes":"works the same as at_least_buildings () , except that it is triggered by a certain number of military units."
  },
  {
     "name":"at_least_points",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"num",
           "type":"int"
        },
        {
           "name":"res_type",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Triggered by a player having a certain gather rate.",
     "notes":"works the same as at_least_buildings () , except that it is triggered by a certain number of points."
  },
  {
     "name":"at_least_pop",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"num",
           "type":"int"
        },
        {
           "name":"res_type",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Triggered by a player having a certain gather rate.",
     "notes":"works the same as at_least_buildings () , except that it is triggered by a certain amount of points."
  },
  {
     "name":"at_least_type",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"num",
           "type":"int"
        },
        {
           "name":"type",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed",
        "type":"int"
     },
     "description":"Triggered by a player having a certain number of a type.",
     "notes":""
  },
  {
     "name":"at_least_unit_category",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"num",
           "type":"int"
        },
        {
           "name":"unit_cat",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed",
        "type":"int"
     },
     "description":"Triggered by a player having a certain number of a unit category. Categories: Foot, Mounted, Mech, Artillery, Command, Civilian, Sail (boats with sails), Naval (boats without sails), Air.",
     "notes":""
  },
  {
     "name":"less_than_age",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"num",
           "type":"int"
        },
        {
           "name":"unit_cat",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed",
        "type":"int"
     },
     "description":"Triggered by a player having a certain number of a unit category. Categories: Foot, Mounted, Mech, Artillery, Command, Civilian, Sail (boats with sails), Naval (boats without sails), Air.",
     "notes":"works the opposite of at_least_age (). Instead it checks if a nation\u2019s age is less than a certain age."
  },
  {
     "name":"less_than_buildings",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"num",
           "type":"int"
        },
        {
           "name":"unit_cat",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed",
        "type":"int"
     },
     "description":"Triggered by a player having a certain number of a unit category. Categories: Foot, Mounted, Mech, Artillery, Command, Civilian, Sail (boats with sails), Naval (boats without sails), Air.",
     "notes":"works the opposite of at_least_buildings (). Instead it checks if a nation has less than a certain number of buildings."
  },
  {
     "name":"less_than_civilian_buildings",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"num",
           "type":"int"
        },
        {
           "name":"unit_cat",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed",
        "type":"int"
     },
     "description":"Triggered by a player having a certain number of a unit category. Categories: Foot, Mounted, Mech, Artillery, Command, Civilian, Sail (boats with sails), Naval (boats without sails), Air.",
     "notes":"works the opposite of at_least_civilian_buildings (). Instead it checks if a nation has less than a certain number of civilian buildings."
  },
  {
     "name":"less_than_civilian_units",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"num",
           "type":"int"
        },
        {
           "name":"unit_cat",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed",
        "type":"int"
     },
     "description":"Triggered by a player having a certain number of a unit category. Categories: Foot, Mounted, Mech, Artillery, Command, Civilian, Sail (boats with sails), Naval (boats without sails), Air.",
     "notes":"works the opposite of at_least_civilian_units (). Instead it checks if a nation has less than a certain number of civilian units."
  },
  {
     "name":"less_than_gather_rate",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"num",
           "type":"int"
        },
        {
           "name":"unit_cat",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed",
        "type":"int"
     },
     "description":"Triggered by a player having a certain number of a unit category. Categories: Foot, Mounted, Mech, Artillery, Command, Civilian, Sail (boats with sails), Naval (boats without sails), Air.",
     "notes":"works the opposite of at_least_gather_rate (). Instead it checks if a nation has less than a certain gather rate of a certain resource."
  },
  {
     "name":"less_than_military_buildings",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"num",
           "type":"int"
        },
        {
           "name":"unit_cat",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed",
        "type":"int"
     },
     "description":"Triggered by a player having a certain number of a unit category. Categories: Foot, Mounted, Mech, Artillery, Command, Civilian, Sail (boats with sails), Naval (boats without sails), Air.",
     "notes":"works the opposite of at_least_military_buildings (). Instead it checks if a nation has less than a certain number of military buildings."
  },
  {
     "name":"less_than_military_units",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"num",
           "type":"int"
        },
        {
           "name":"unit_cat",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed",
        "type":"int"
     },
     "description":"Triggered by a player having a certain number of a unit category. Categories: Foot, Mounted, Mech, Artillery, Command, Civilian, Sail (boats with sails), Naval (boats without sails), Air.",
     "notes":"works the opposite of at_least_military_units (). Instead it checks if a nation has less than a certain number of military units."
  },
  {
     "name":"less_than_points",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"num",
           "type":"int"
        },
        {
           "name":"unit_cat",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed",
        "type":"int"
     },
     "description":"Triggered by a player having a certain number of a unit category. Categories: Foot, Mounted, Mech, Artillery, Command, Civilian, Sail (boats with sails), Naval (boats without sails), Air.",
     "notes":"works the opposite of at_least_points (). Instead it checks if a nation has less than a certain number of points."
  },
  {
     "name":"less_than_pop",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"num",
           "type":"int"
        },
        {
           "name":"unit_cat",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed",
        "type":"int"
     },
     "description":"Triggered by a player having a certain number of a unit category. Categories: Foot, Mounted, Mech, Artillery, Command, Civilian, Sail (boats with sails), Naval (boats without sails), Air.",
     "notes":"works the opposite of at_least_pop (). Instead it checks if a nation has less than a certain amount of population."
  },
  {
     "name":"less_than_type",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"num",
           "type":"int"
        },
        {
           "name":"unit_cat",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed",
        "type":"int"
     },
     "description":"Triggered by a player having a certain number of a unit category. Categories: Foot, Mounted, Mech, Artillery, Command, Civilian, Sail (boats with sails), Naval (boats without sails), Air.",
     "notes":"works the opposite of at_least_type (). Instead it checks if a nation has less than a certain number of objects of a type."
  },
  {
     "name":"less_than_unit_category",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"num",
           "type":"int"
        },
        {
           "name":"unit_cat",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed",
        "type":"int"
     },
     "description":"Triggered by a player having a certain number of a unit category. Categories: Foot, Mounted, Mech, Artillery, Command, Civilian, Sail (boats with sails), Naval (boats without sails), Air.",
     "notes":"works the opposite of at_least_unit_category (). Instead it checks if a nation has less than a certain number of units in a category."
  },
  {
     "name":"time_earlier_than",
     "arguments":[
        {
           "name":"seconds",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Triggered by a certain time not yet being reached.",
     "notes":""
  },
  {
     "name":"time_later_than",
     "arguments":[
        {
           "name":"seconds",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Triggered by a certain time not yet being reached.",
     "notes":"works the same as time_earlier_than , except instead it checks if it is later than a certain time."
  },
  {
     "name":"defeat_attacker_and_allies",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Defeats the attacker and his allies in a Conquer the World scenario.",
     "notes":""
  },
  {
     "name":"field_battle_disable",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Disables special Field Battle rule in Conquer the World. The rule allows units to entrench in neutral territory.",
     "notes":""
  },
  {
     "name":"field_battle_enable",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Disables special Field Battle rule in Conquer the World. The rule allows units to entrench in neutral territory.",
     "notes":"works the same as field_battle_disable , except it turns on the special Field Battle rule in Conquer the World of units being allowed to entrench in neutral territory."
  },
  {
     "name":"get_conquest_invasion_dir",
     "arguments":[
        
     ],
     "return":{
        "name":"A degree from 0-360 if true or success, -1 if failed.",
        "type":"int"
     },
     "description":"Gets the direction from which troops invaded from in Conquer the World. See the script defruntime1.bhs, located in the game /conquest/scripts directory for a more detailed example.",
     "notes":""
  },
  {
     "name":"group_jump_move",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"x",
           "type":"int"
        },
        {
           "name":"y",
           "type":"int"
        },
        {
           "name":"num_angle",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Jump moves the current group to a new location in Conquer the World scenarios. See the battlesetup.bhs script file located in the game /conquest/scripts directory to find a more detailed example.",
     "notes":""
  },
  {
     "name":"is_conquest_scenario",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if the current scenario is a conquest scenario.",
     "notes":""
  },
  {
     "name":"create_building",
     "arguments":[
        {
           "name":"who_receiver",
           "type":"int"
        },
        {
           "name":"x",
           "type":"int"
        },
        {
           "name":"y",
           "type":"int"
        },
        {
           "name":"build_type",
           "type":"string"
        }
     ],
     "return":{
        "name":"new_id = create_building(2, 155, 165, \u201cStable\u201d);",
        "type":"int"
     },
     "description":"Creates a new building for a player.",
     "notes":""
  },
  {
     "name":"create_building_near",
     "arguments":[
        {
           "name":"who_receiver",
           "type":"int"
        },
        {
           "name":"x",
           "type":"int"
        },
        {
           "name":"y",
           "type":"int"
        },
        {
           "name":"build_type",
           "type":"string"
        },
        {
           "name":"dist_radius",
           "type":"int"
        }
     ],
     "return":{
        "name":"new_id = create_building_near(2, 155, 165, \u201cStable\u201d, 10);",
        "type":"int"
     },
     "description":"Creates a new building for a player, and gives some slack for placement if the exact game world coordinates are already occupied.",
     "notes":""
  },
  {
     "name":"create_building_upgrade",
     "arguments":[
        {
           "name":"who_receiver",
           "type":"int"
        },
        {
           "name":"x",
           "type":"int"
        },
        {
           "name":"y",
           "type":"int"
        },
        {
           "name":"build_type",
           "type":"string"
        },
        {
           "name":"dist_radius",
           "type":"int"
        }
     ],
     "return":{
        "name":"new_id = create_building_near(2, 155, 165, \u201cStable\u201d, 10);",
        "type":"int"
     },
     "description":"Creates a new building for a player, and gives some slack for placement if the exact game world coordinates are already occupied.",
     "notes":"works the same as create_building, except it creates the current upgrade of the building."
  },
  {
     "name":"create_unit",
     "arguments":[
        {
           "name":"who_receiver",
           "type":"int"
        },
        {
           "name":"x",
           "type":"int"
        },
        {
           "name":"y",
           "type":"int"
        },
        {
           "name":"unit_type",
           "type":"string"
        },
        {
           "name":"num_units",
           "type":"int"
        }
     ],
     "return":{
        "name":"new_id = create_unit(2, 155, 165, \u201cInti Clubmen\u201d, 5);",
        "type":"int"
     },
     "description":"Creates a new unit for a player. Clears the current group and starts a new one with this unit. Can create more than one unit.",
     "notes":""
  },
  {
     "name":"create_unit_in_group",
     "arguments":[
        {
           "name":"who_receiver",
           "type":"int"
        },
        {
           "name":"x",
           "type":"int"
        },
        {
           "name":"y",
           "type":"int"
        },
        {
           "name":"unit_type",
           "type":"string"
        },
        {
           "name":"num_units",
           "type":"int"
        }
     ],
     "return":{
        "name":"new_id = create_unit(2, 155, 165, \u201cInti Clubmen\u201d, 5);",
        "type":"int"
     },
     "description":"Creates a new unit for a player. Clears the current group and starts a new one with this unit. Can create more than one unit.",
     "notes":"works the same as create_unit , except that it creates the current upgrade of the unit and does not clear the current group. The created unit is added to the current group."
  },
  {
     "name":"destroy_building",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"build_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Destroys a building.",
     "notes":""
  },
  {
     "name":"destroy_building_type",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"build_type",
           "type":"string"
        }
     ],
     "return":{
        "name":"how_many_destroyed = destroy_building_type(3, \u201cFarm\u201d);",
        "type":"int"
     },
     "description":"Destroys all of a player\u2019s buildings of a certain type.",
     "notes":""
  },
  {
     "name":"kill_unit",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"unit_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Kills a unit.",
     "notes":""
  },
  {
     "name":"kill_unit_anim",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"unit_o",
           "type":"int"
        },
        {
           "name":"unit_anim_id",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Kills a unit in a certain way. Animations to choose from:1, no animation2, stabbed3, shot4, exploded",
     "notes":""
  },
  {
     "name":"kill_unit_type_anim",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"unit_type",
           "type":"string"
        },
        {
           "name":"unit_anim_id",
           "type":"int"
        }
     ],
     "return":{
        "name":"",
        "type":"int"
     },
     "description":"Kills all of a player\u2019s units of a certain type.Kills all of a player\u2019s units of a certain type in a certain way. Animations to choose from:",
     "notes":""
  },
  {
     "name":"accept_offer",
     "arguments":[
        {
           "name":"who_acceptor",
           "type":"int"
        },
        {
           "name":"who_asker",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Forces a player to accept another player\u2019s diplomatic offer.",
     "notes":""
  },
  {
     "name":"add_visibility",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"who_target",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Gives a player another player\u2019s visibility.",
     "notes":""
  },
  {
     "name":"amount_offered",
     "arguments":[
        {
           "name":"who_offering",
           "type":"int"
        },
        {
           "name":"who_offered",
           "type":"int"
        },
        {
           "name":"res_type",
           "type":"string"
        }
     ],
     "return":{
        "name":"The amount offered if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds out how much resources have been offered from one player to another.",
     "notes":""
  },
  {
     "name":"contact_open",
     "arguments":[
        
     ],
     "return":{
        "name":"The player number contact is open with if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if the contact window is open and with who.",
     "notes":""
  },
  {
     "name":"declare_war",
     "arguments":[
        {
           "name":"who_declarer",
           "type":"int"
        },
        {
           "name":"who_declaree",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Forces a player to declare war on another player.",
     "notes":""
  },
  {
     "name":"demand_tribute",
     "arguments":[
        {
           "name":"who_asker",
           "type":"int"
        },
        {
           "name":"who_askee",
           "type":"int"
        },
        {
           "name":"res_type",
           "type":"string"
        },
        {
           "name":"num",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Makes a player demand tribute from another player.",
     "notes":""
  },
  {
     "name":"diplomacy_block_war",
     "arguments":[
        {
           "name":"who_blocking",
           "type":"int"
        },
        {
           "name":"who_blocked",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Blocks a nation from declaring war on another nation.",
     "notes":""
  },
  {
     "name":"diplomacy_enable_war",
     "arguments":[
        {
           "name":"who_blocking",
           "type":"int"
        },
        {
           "name":"who_blocked",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Blocks a nation from declaring war on another nation.",
     "notes":"works the same as diplomacy_block_war , , except it allows a nation to declare war on another nation."
  },
  {
     "name":"diplomacy_open",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if the diplomacy window is open.",
     "notes":""
  },
  {
     "name":"diplomacy_set_accept",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Makes a player accept a diplomatic offer.",
     "notes":""
  },
  {
     "name":"diplomacy_set_auto",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed",
        "type":"int"
     },
     "description":"Sets an AI player to automatically resolved diplomacy.",
     "notes":""
  },
  {
     "name":"diplomacy_set_reject",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed",
        "type":"int"
     },
     "description":"Sets an AI player to automatically resolved diplomacy.",
     "notes":"works the same as diplomacy_set_accept, except it makes a nation reject a diplomatic offer."
  },
  {
     "name":"diplomacy_set_wait",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Sets an AI player to wait to resolve diplomacy.",
     "notes":""
  },
  {
     "name":"have_alliance",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"whom",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if a nation has an alliance with another nation.",
     "notes":""
  },
  {
     "name":"have_contact",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"whom",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if a nation has an alliance with another nation.",
     "notes":"works like have_alliance , except for it finds if a nation has contact with another nation."
  },
  {
     "name":"have\u00ad_fought",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"whom",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if a nation has an alliance with another nation.",
     "notes":"works like have_alliance, except for it finds if a nation has fought with another nation."
  },
  {
     "name":"have_peace",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"whom",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if a nation has an alliance with another nation.",
     "notes":"works like have_alliance, except for it finds if a nation has peace with another nation."
  },
  {
     "name":"have_trade",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"whom",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if a nation has an alliance with another nation.",
     "notes":"works like have_alliance, except for it finds if a nation has trade with another nation. Trade is defined as having a Caravan going between a City of one nation and a City of another."
  },
  {
     "name":"have_war",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"whom",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if a nation has an alliance with another nation.",
     "notes":"works like have_alliance, except for it finds if a nation has war with another nation."
  },
  {
     "name":"is_offering_alliance",
     "arguments":[
        {
           "name":"who_asker",
           "type":"int"
        },
        {
           "name":"who_askee",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if a player is offering another player an alliance.",
     "notes":""
  },
  {
     "name":"is_offering_peace",
     "arguments":[
        {
           "name":"who_asker",
           "type":"int"
        },
        {
           "name":"who_askee",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if a player is offering another player an alliance.",
     "notes":"works the same as is_offering_alliance, except it finds if a nation is offering another nation peace."
  },
  {
     "name":"make_counter_offer",
     "arguments":[
        {
           "name":"who_initial_offer",
           "type":"int"
        },
        {
           "name":"who_counter_offer",
           "type":"int"
        },
        {
           "name":"res_type",
           "type":"string"
        },
        {
           "name":"num_amount",
           "type":"int"
        },
        {
           "name":"message",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Makes a counter-offer to a previous offer, changing the resources involved and sending a new message.",
     "notes":""
  },
  {
     "name":"offer_accepted",
     "arguments":[
        {
           "name":"who_who_asker",
           "type":"int"
        },
        {
           "name":"who_askee",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if a player has accepted another player\u2019s offer.",
     "notes":""
  },
  {
     "name":"offer_alliance",
     "arguments":[
        {
           "name":"who_asker",
           "type":"int"
        },
        {
           "name":"who_askee",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Makes a player offer an alliance to another player.",
     "notes":""
  },
  {
     "name":"offer_made",
     "arguments":[
        {
           "name":"who_who_asker",
           "type":"int"
        },
        {
           "name":"who_askee",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if an offer was made from one player to another.",
     "notes":""
  },
  {
     "name":"offer_mutual_attack",
     "arguments":[
        {
           "name":"who_asker",
           "type":"int"
        },
        {
           "name":"who_askee",
           "type":"int"
        },
        {
           "name":"who_target",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Makes a player propose that he and another player attack a third player.",
     "notes":""
  },
  {
     "name":"offer_peace",
     "arguments":[
        {
           "name":"who_asker",
           "type":"int"
        },
        {
           "name":"who_askee",
           "type":"int"
        },
        {
           "name":"who_target",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Makes a player propose that he and another player attack a third player.",
     "notes":"works the same as offer_alliance, except it makes a nation offer peace to another nation."
  },
  {
     "name":"offer_rejected",
     "arguments":[
        {
           "name":"who_asker",
           "type":"int"
        },
        {
           "name":"who_askee",
           "type":"int"
        },
        {
           "name":"who_target",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Makes a player propose that he and another player attack a third player.",
     "notes":"works the opposite of offer_accepted (). It finds if an offer was rejected."
  },
  {
     "name":"offer_tribute",
     "arguments":[
        {
           "name":"who_sender",
           "type":"int"
        },
        {
           "name":"who_receiver",
           "type":"int"
        },
        {
           "name":"res_type",
           "type":"string"
        },
        {
           "name":"num",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Makes a nation offer tribute to another nation.",
     "notes":""
  },
  {
     "name":"reject_offer",
     "arguments":[
        {
           "name":"who_sender",
           "type":"int"
        },
        {
           "name":"who_receiver",
           "type":"int"
        },
        {
           "name":"res_type",
           "type":"string"
        },
        {
           "name":"num",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Makes a nation offer tribute to another nation.",
     "notes":"works the opposite of accept_offer (). It makes a nation reject another nation\u2019s offer."
  },
  {
     "name":"remove_visibility",
     "arguments":[
        {
           "name":"who_sender",
           "type":"int"
        },
        {
           "name":"who_receiver",
           "type":"int"
        },
        {
           "name":"res_type",
           "type":"string"
        },
        {
           "name":"num",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Makes a nation offer tribute to another nation.",
     "notes":"works the opposite of add_visibility (). It removes visibility of one nation from another nation."
  },
  {
     "name":"revoke_offer",
     "arguments":[
        {
           "name":"who_asker",
           "type":"int"
        },
        {
           "name":"who_askee",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Revoke an offer that a player made to another player.",
     "notes":""
  },
  {
     "name":"was_attacked",
     "arguments":[
        {
           "name":"who_defender",
           "type":"int"
        },
        {
           "name":"who_attacker",
           "type":"int"
        },
        {
           "name":"seconds",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if a player has been attacked by another player.",
     "notes":""
  },
  {
     "name":"was_capital_attacked",
     "arguments":[
        {
           "name":"who_defender",
           "type":"int"
        },
        {
           "name":"who_attacker",
           "type":"int"
        },
        {
           "name":"seconds",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if a player has been attacked by another player.",
     "notes":"works like was_city_attacked, except for it finds if a nation\u2019s capital was attacked by another nation."
  },
  {
     "name":"was_city_attacked",
     "arguments":[
        {
           "name":"who_defender",
           "type":"int"
        },
        {
           "name":"city_name",
           "type":"string"
        },
        {
           "name":"seconds",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if a player\u2019s city has been attacked.",
     "notes":""
  },
  {
     "name":"was_city_raided",
     "arguments":[
        {
           "name":"who_defender",
           "type":"int"
        },
        {
           "name":"city_name",
           "type":"string"
        },
        {
           "name":"seconds",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if a player\u2019s city has been attacked.",
     "notes":"works like was_city_attacked , except for it finds if a City was raided by another nation."
  },
  {
     "name":"was_raided",
     "arguments":[
        {
           "name":"who_defender",
           "type":"int"
        },
        {
           "name":"city_name",
           "type":"string"
        },
        {
           "name":"seconds",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if a player\u2019s city has been attacked.",
     "notes":"works like was_attacked, except for it finds if a nation was raided by another nation."
  },
  {
     "name":"add_flag",
     "arguments":[
        {
           "name":"x",
           "type":"int"
        },
        {
           "name":"y",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Draws a flag at a certain location on the map.",
     "notes":""
  },
  {
     "name":"clear_flags",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Clears all flags on the map.",
     "notes":""
  },
  {
     "name":"building_costs_disable",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Disables the cost of buildings.",
     "notes":""
  },
  {
     "name":"building_costs_enable",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Disables the cost of buildings.",
     "notes":"works the same as building_costs_disable , except it enables the costs of buildings."
  },
  {
     "name":"building_resource_bonus_disable",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Disables building completion bonus resources.",
     "notes":""
  },
  {
     "name":"building_resource_bonus_enable",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Disables building completion bonus resources.",
     "notes":"works the same as building_resource_bonus_disable , except it enables building completion bonus resources."
  },
  {
     "name":"building_unit_bonus_disable",
     "arguments":[
        
     ],
     "return":{
        
     },
     "description":"Disables building completion free unit bonus.",
     "notes":""
  },
  {
     "name":"building_unit_bonus_enable",
     "arguments":[
        
     ],
     "return":{
        
     },
     "description":"Disables building completion free unit bonus.",
     "notes":"works the same as building_unit_bonus_disable , except it enables building completion free unit bonus."
  },
  {
     "name":"buildings_gather_disable",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Disables the collection of resources from buildings.",
     "notes":""
  },
  {
     "name":"buildings_gather_enable",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Disables the collection of resources from buildings.",
     "notes":"works the same as buildings_gather_disable , except it enables the collection of resources from building."
  },
  {
     "name":"get_difficulty",
     "arguments":[
        
     ],
     "return":{
        "name":"A number 1-6 to indicate the difficulty level if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds the difficulty of the scenario.",
     "notes":""
  },
  {
     "name":"get_no_nation_powers",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if the game is set to no nation powers.",
     "notes":""
  },
  {
     "name":"get_leader_difficulty",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"A number 1-6 to indicate the difficulty level if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds the difficulty settings of one AI player.",
     "notes":""
  },
  {
     "name":"get_leader_name",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"A string value.",
        "type":"string"
     },
     "description":"Finds the name of a leader.",
     "notes":""
  },
  {
     "name":"get_player_profile_name",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"A string value.",
        "type":"string"
     },
     "description":"Finds the name of the current player profile.",
     "notes":""
  },
  {
     "name":"get_rush_rules",
     "arguments":[
        
     ],
     "return":{
        "name":"An integer value from 0-14 (listed above) if true, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds the rush rules.",
     "notes":""
  },
  {
     "name":"is_victory_conquest",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if the victory condition is conquest.",
     "notes":""
  },
  {
     "name":"is\u00ad_victory_economic",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if the victory condition is conquest.",
     "notes":"works like is_victory_conquest , except that it checks if the victory condition is economic."
  },
  {
     "name":"is\u00ad_victory_musical_chairs",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if the victory condition is conquest.",
     "notes":"works like is_victory_conquest, except that it checks if the victory condition is musical_chairs"
  },
  {
     "name":"is\u00ad_victory_score",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if the victory condition is conquest.",
     "notes":"works like is_victory_conquest, except that it checks if the victory condition is score."
  },
  {
     "name":"is\u00ad_victory_standard",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if the victory condition is conquest.",
     "notes":"works like is_victory_conquest, except that it checks if the victory condition is standard."
  },
  {
     "name":"is\u00ad_victory_sudden_death",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if the victory condition is conquest.",
     "notes":"works like is_victory_conquest, except that it checks if the victory condition is sudden death."
  },
  {
     "name":"is\u00ad_victory_tech_race",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if the victory condition is conquest.",
     "notes":"works like is_victory_conquest, except that it checks if the victory condition is a technology race."
  },
  {
     "name":"is\u00ad_victory_territory",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if the victory condition is conquest.",
     "notes":"works like is_victory_conquest, except that it checks if the victory condition is territory."
  },
  {
     "name":"is\u00ad_victory_time_limit",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if the victory condition is conquest.",
     "notes":"works like is_victory_conquest, except that it checks if the victory condition is time limit."
  },
  {
     "name":"is\u00ad_victory_wonder",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if the victory condition is conquest.",
     "notes":"works like is_victory_conquest, except that it checks if the victory condition is wonder."
  },
  {
     "name":"pause_disable",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Disables use of the pause key.",
     "notes":""
  },
  {
     "name":"pause_enable",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Disables use of the pause key.",
     "notes":"works the same as pause_disable , except it enables use of the pause key."
  },
  {
     "name":"plunder_disable",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Disables plunder resource bonus from destroying buildings.",
     "notes":""
  },
  {
     "name":"plunder_enable",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Disables plunder resource bonus from destroying buildings.",
     "notes":"works same as plunder_disable , except it enables plunder resource bonus for destroying buildings."
  },
  {
     "name":"set_difficulty",
     "arguments":[
        {
           "name":"num_difficulty",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Sets the difficulty of AI opponents.",
     "notes":""
  },
  {
     "name":"set_leader_difficulty",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"num_difficulty",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Sets the difficulty of an AI opponent.",
     "notes":""
  },
  {
     "name":"set_leader_name",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"str",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Sets the name of the leader of the player (displayed in score).",
     "notes":""
  },
  {
     "name":"speed_control_disable",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Disables the ability to change the game speed.",
     "notes":""
  },
  {
     "name":"speed_control_enable",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Disables the ability to change the game speed.",
     "notes":"works the same as speed_control_disable , except it enables the ability to change the game speed."
  },
  {
     "name":"switch_player_control",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Switches the nation that the player controls.",
     "notes":""
  },
  {
     "name":"tech_costs_disable",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Disables costs for technologies.",
     "notes":""
  },
  {
     "name":"tech_costs_enable",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Disables costs for technologies.",
     "notes":"works the same as tech_costs_disable , except it enables costs for technologies."
  },
  {
     "name":"unit_costs_disable",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Disables costs for units.",
     "notes":""
  },
  {
     "name":"unit_costs_enable",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Disables costs for units.",
     "notes":"works the same as unit_costs_disable , except it turns on unit costs."
  },
  {
     "name":"disable_all_unit_ai",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Disables all of a nation\u2019s global unit AI.",
     "notes":""
  },
  {
     "name":"disable_city_ai",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Prevents AI from founding new cities.",
     "notes":""
  },
  {
     "name":"disable_city_defeat",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Disables a nation from being defeated by losing all his buildings and units.",
     "notes":""
  },
  {
     "name":"disable_combat_ai",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Disables unit combat AI. Units only respond to their stance.",
     "notes":""
  },
  {
     "name":"disable_production_ai",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Disables a computer nation\u2019s production AI.",
     "notes":""
  },
  {
     "name":"disable_unit_ai",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"unit_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Disables the unit AI of one unit.",
     "notes":""
  },
  {
     "name":"enable_all_unit_ai",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"unit_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Disables the unit AI of one unit.",
     "notes":"works like disable_all_unit_ai, except it enables all of a nation\u2019s global AI."
  },
  {
     "name":"enable_city_ai",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"unit_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Disables the unit AI of one unit.",
     "notes":"works like disable_city_ai, except it enables the computer\u2019s ability to build cities."
  },
  {
     "name":"enable_city_defeat",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"unit_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Disables the unit AI of one unit.",
     "notes":"works like disable_city_defeat, except it enables a nation\u2019s ability to be defeated by losing all his cities."
  },
  {
     "name":"enable_combat_ai",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"unit_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Disables the unit AI of one unit.",
     "notes":"works like disable_combat_ai, except it enables unit combat AI. Units only respond to their stance."
  },
  {
     "name":"enable_production_ai",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"unit_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Disables the unit AI of one unit.",
     "notes":"works like disable_production_ai, except it enables a nation\u2019s production AI."
  },
  {
     "name":"enable_unit_ai",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"unit_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Disables the unit AI of one unit.",
     "notes":"works like enable_unit_ai, except it enables the unit AI of one unit."
  },
  {
     "name":"force_transport_ability",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Allow units to transport across water even if they don\u2019t have the requirements.",
     "notes":""
  },
  {
     "name":"load_production_script",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"filename",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Changes the default AI \u201cbest build\u201d script. Looks for scripts in the game ai/scripts folder.",
     "notes":""
  },
  {
     "name":"set_auto_peasant_level",
     "arguments":[
        {
           "name":"num_level",
           "type":"int"
        }
     ],
     "return":{
        
     },
     "description":"Sets the auto peasant level.",
     "notes":""
  },
  {
     "name":"group_id",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"The next unit ID in the group if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Gets the ID of a unit in the current group. Consecutive calls cycles through all units in the group.",
     "notes":""
  },
  {
     "name":"involved_id",
     "arguments":[
        
     ],
     "return":{
        "name":"The next ID of a unit in the involved list if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Returns the next ID of a unit in the involved list.",
     "notes":""
  },
  {
     "name":"involved_nation",
     "arguments":[
        
     ],
     "return":{
        "name":"The nation index of the involved units if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Returns the nation of the involved units.",
     "notes":""
  },
  {
     "name":"num_in_group",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"The number of units in a certain nation\u2019s stored group if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Gets the number of units in a certain nation\u2019s stored group.",
     "notes":""
  },
  {
     "name":"num_involved",
     "arguments":[
        
     ],
     "return":{
        "name":"The number of units or buildings involved in the last query if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Returns the number of units or buildings involved in the last query.",
     "notes":""
  },
  {
     "name":"damage_object",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"object_o",
           "type":"int"
        },
        {
           "name":"percent",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Damages a certain object by a specified percent.",
     "notes":""
  },
  {
     "name":"heal_object",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"object_o",
           "type":"int"
        },
        {
           "name":"percent",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Damages a certain object by a specified percent.",
     "notes":"works like damage_object, except it heals a certain object by a specified percent."
  },
  {
     "name":"object_health",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"object_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"The health of an object if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Returns the health of an object.",
     "notes":""
  },
  {
     "name":"object_max_health",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"object_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"The max health of an object if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Returns the max health of an object.",
     "notes":""
  },
  {
     "name":"set_object_health",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"object_o",
           "type":"int"
        },
        {
           "name":"percent",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Sets the health of an object to a specified percent.",
     "notes":""
  },
  {
     "name":"set_object_type_max_health",
     "arguments":[
        {
           "name":"object_type",
           "type":"string"
        },
        {
           "name":"num_hitpoints",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Sets the maximum health of an object type.",
     "notes":""
  },
  {
     "name":"key_down",
     "arguments":[
        {
           "name":"key",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"A trigger that activates when a key is down.",
     "notes":""
  },
  {
     "name":"key_released",
     "arguments":[
        {
           "name":"key",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"A trigger that activates when a key is down.",
     "notes":"works the same as key_down , except it is triggered when a key is released."
  },
  {
     "name":"clear_extra_starting_locs",
     "arguments":[
        
     ],
     "return":{
        
     },
     "description":"Clears extra starting location found using the find_extra_starting_loc function.",
     "notes":""
  },
  {
     "name":"find_extra_starting_loc",
     "arguments":[
        {
           "name":"num_nation_space",
           "type":"int"
        },
        {
           "name":"num_land_space",
           "type":"int"
        },
        {
           "name":"bool_only_check_player",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds extra starting locations for player\u2019s capitals.",
     "notes":""
  },
  {
     "name":"get_extra_starting_loc_x",
     "arguments":[
        
     ],
     "return":{
        "name":"An integer value representing the game world X coordinate found with get_extra_starting_loc_x if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Gets the game world X location found with find_extra_starting_loc.",
     "notes":""
  },
  {
     "name":"get_extra_starting_loc_y",
     "arguments":[
        
     ],
     "return":{
        "name":"An integer value representing the game world X coordinate found with get_extra_starting_loc_x if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Gets the game world X location found with find_extra_starting_loc.",
     "notes":"works the same as get_starting_loc_x , except it gets the game world Y location found with find_extra_starting_loc ()."
  },
  {
     "name":"get_map_size",
     "arguments":[
        
     ],
     "return":{
        "name":"An integer value representing the highest X or Y value possible on the map if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds the size of the map in game world X and Y coordinates.",
     "notes":""
  },
  {
     "name":"get_mapstyle",
     "arguments":[
        
     ],
     "return":{
        "name":"A string value of what style of map is being played if true or success, 0 if false (if used in an expression).",
        "type":"string"
     },
     "description":"Finds what type of map is being played.",
     "notes":""
  },
  {
     "name":"get_tileset",
     "arguments":[
        
     ],
     "return":{
        "name":"A string value of what style of tile set is being used if true or success, 0 if false (if used in an expression).",
        "type":"string"
     },
     "description":"Finds what type of tile set is being used.",
     "notes":""
  },
  {
     "name":"map_is_buildable",
     "arguments":[
        {
           "name":"x",
           "type":"int"
        },
        {
           "name":"y",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if buildings can be placed on a specific tile.",
     "notes":""
  },
  {
     "name":"map_is_land",
     "arguments":[
        {
           "name":"x",
           "type":"int"
        },
        {
           "name":"y",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if buildings can be placed on a specific tile.",
     "notes":"works the same as map_is_buildable , except it finds if a specific tile is land."
  },
  {
     "name":"map_is_passable",
     "arguments":[
        {
           "name":"x",
           "type":"int"
        },
        {
           "name":"y",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if buildings can be placed on a specific tile.",
     "notes":"works the same as map_is_buildable, except it finds if a specific tile is passable by units."
  },
  {
     "name":"territory_object",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"object_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"A number 1-8 (the nation index) if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds who owns the territory of the tile that an object is currently located.",
     "notes":""
  },
  {
     "name":"territory_owner",
     "arguments":[
        {
           "name":"x",
           "type":"int"
        },
        {
           "name":"y",
           "type":"int"
        }
     ],
     "return":{
        "name":"A number 1-8 (the nation index), 0 if false or no one owns the tile, -1 if failed.",
        "type":"int"
     },
     "description":"Finds the current owner of a specific location on the map.",
     "notes":""
  },
  {
     "name":"world_x_size",
     "arguments":[
        
     ],
     "return":{
        "name":"An integer value representing the game world X size if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds the game world X size.",
     "notes":""
  },
  {
     "name":"world_y_size",
     "arguments":[
        
     ],
     "return":{
        "name":"An integer value representing the game world X size if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds the game world X size.",
     "notes":"works the same as world_x_size , except that it finds the game world Y size."
  },
  {
     "name":"add_reveal_point",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"x",
           "type":"int"
        },
        {
           "name":"y",
           "type":"int"
        },
        {
           "name":"dist_radius",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Adds points on the map that are revealed to a player.",
     "notes":""
  },
  {
     "name":"clear_reveal_points",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Clears any reveal points given to a player.",
     "notes":""
  },
  {
     "name":"set_explored",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Clears any reveal points given to a player.",
     "notes":"works the same as add_reveal_point, except it makes points on the map explored instead of revealed."
  },
  {
     "name":"set_seen",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"whose_build",
           "type":"int"
        },
        {
           "name":"build_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Sets a building seen for a player.",
     "notes":""
  },
  {
     "name":"show_all_map_disable",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Disables a nation from seeing all of the map.",
     "notes":""
  },
  {
     "name":"show_all_map_enable",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Disables a nation from seeing all of the map.",
     "notes":"works the same as show_all_map_disable , except it enables a nation to see all of the map."
  },
  {
     "name":"buy_good",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"res_type",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Forces a player to buy 100 of a resource.",
     "notes":""
  },
  {
     "name":"can_buy_sell",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Checks if a nation can buy and sell resources at the market.",
     "notes":""
  },
  {
     "name":"find_buy_price",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"res_type",
           "type":"string"
        }
     ],
     "return":{
        "name":"The buy price of the specified resource for the specified player if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds the buy price of a resource for a player.",
     "notes":""
  },
  {
     "name":"find_sell_price",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"res_type",
           "type":"string"
        }
     ],
     "return":{
        "name":"The buy price of the specified resource for the specified player if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds the buy price of a resource for a player.",
     "notes":"works the same as find_buy_price , except instead it finds the sell price of a resource for a nation."
  },
  {
     "name":"give_good",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"res_type",
           "type":"string"
        },
        {
           "name":"num",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Gives a nation a specified amount of a resource.",
     "notes":""
  },
  {
     "name":"sell_good",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"res_type",
           "type":"string"
        },
        {
           "name":"num",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Gives a nation a specified amount of a resource.",
     "notes":"works the opposite of buy_good (). Forces a nation to sell 100 of a resource."
  },
  {
     "name":"set_base_rate",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"res_type",
           "type":"string"
        },
        {
           "name":"num",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed",
        "type":"int"
     },
     "description":"Sets a player\u2019s base resource rate.",
     "notes":""
  },
  {
     "name":"set_good",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"res_type",
           "type":"string"
        },
        {
           "name":"num",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed",
        "type":"int"
     },
     "description":"Sets a player\u2019s resource level.",
     "notes":""
  },
  {
     "name":"take_good",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"res_type",
           "type":"string"
        },
        {
           "name":"num",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed",
        "type":"int"
     },
     "description":"Sets a player\u2019s resource level.",
     "notes":"works the same as give_good, except instead it takes away an amount of a resource from a nation."
  },
  {
     "name":"clear_game_msg",
     "arguments":[
        
     ],
     "return":{
        
     },
     "description":"Clears current game messages.",
     "notes":""
  },
  {
     "name":"clear_msg",
     "arguments":[
        
     ],
     "return":{
        
     },
     "description":"Clears all current messages.",
     "notes":""
  },
  {
     "name":"print_game_msg",
     "arguments":[
        {
           "name":"message",
           "type":"string"
        }
     ],
     "return":{
        
     },
     "description":"Prints a game message at the normal game message queue at left of the screen. Messages disappear after awhile.",
     "notes":""
  },
  {
     "name":"print_msg",
     "arguments":[
        {
           "name":"message",
           "type":"string"
        }
     ],
     "return":{
        
     },
     "description":"Prints a message at the top center of the screen. Messages stay there until cleared.",
     "notes":""
  },
  {
     "name":"set_game_msg_color",
     "arguments":[
        {
           "name":"color",
           "type":"string"
        }
     ],
     "return":{
        
     },
     "description":"Sets what color game messages are. Default is white.",
     "notes":""
  },
  {
     "name":"set_game_msg_time",
     "arguments":[
        {
           "name":"seconds",
           "type":"int"
        }
     ],
     "return":{
        
     },
     "description":"Sets the time that game messages will stay on the screen. Default is six seconds.",
     "notes":""
  },
  {
     "name":"set_msg_time",
     "arguments":[
        {
           "name":"seconds",
           "type":"int"
        }
     ],
     "return":{
        
     },
     "description":"Sets the time that messages will stay on the screen. Default is six seconds.",
     "notes":""
  },
  {
     "name":"set_feedback_msg",
     "arguments":[
        {
           "name":"message",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, - 1 if false.",
        "type":"int"
     },
     "description":"Sets the feedback message at the top center of the screen. This message clears itself.",
     "notes":""
  },
  {
     "name":"set_instruction_msg",
     "arguments":[
        {
           "name":"message",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, - 1 if false.",
        "type":"int"
     },
     "description":"Sets the feedback message at the top center of the screen. This message clears itself.",
     "notes":"works the same as set_feedback_msg ."
  },
  {
     "name":"use_advanced_menu",
     "arguments":[
        
     ],
     "return":{
        
     },
     "description":"Turns on the advanced menu.",
     "notes":""
  },
  {
     "name":"use_basic_menu",
     "arguments":[
        
     ],
     "return":{
        
     },
     "description":"Turns on the advanced menu.",
     "notes":"works the same as use_advanced_menu, except it turns on the basic menu."
  },
  {
     "name":"popup_choice",
     "arguments":[
        {
           "name":"message_text",
           "type":"string"
        },
        {
           "name":"message_accept",
           "type":"string"
        },
        {
           "name":"message_reject",
           "type":"string"
        }
     ],
     "return":{
        "name":"choice = popup_choice(\u201cDo you want to ally?\u201d, \u201cYes\u201d, \u201cNo\u201d);",
        "type":"int"
     },
     "description":"Pops up a dialog with two buttons to choose.",
     "notes":""
  },
  {
     "name":"popup_dialog",
     "arguments":[
        {
           "name":"message_text",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Pops up a dialog box with an okay button and pauses the game.",
     "notes":""
  },
  {
     "name":"build_placement_warning",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Triggered if the player tries to build on an invalid site.",
     "notes":""
  },
  {
     "name":"city_cap_warning",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Triggered if the player tries to build on an invalid site.",
     "notes":"works like build_placement_warning , except it is triggered if a player tries to build a city when they are city capped."
  },
  {
     "name":"commerce_cap_warning",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Triggered if the player tries to build on an invalid site.",
     "notes":"works like build_placement_warning, except it is triggered if a player is at the resource cap for any resource."
  },
  {
     "name":"pop_cap_warning",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Triggered if the player tries to build on an invalid site.",
     "notes":"works like build_placement_warning, except it is triggered if a player is at the population cap."
  },
  {
     "name":"researching_warning",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Triggered if the player tries to build on an invalid site.",
     "notes":"works like build_placement_warning, except it is triggered if a player tries to research a technology that is it already researching at another building."
  },
  {
     "name":"resource_cap_warning",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"res_type",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Triggered if the player has reached the commerce cap in a specific resource.",
     "notes":""
  },
  {
     "name":"resource_warning",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"res_type",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Triggered if the player has reached the commerce cap in a specific resource.",
     "notes":"works like build_placement_warning, except it is triggered if a player tries to build/research something but does not have the resources to pay for it."
  },
  {
     "name":"tech_warning",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"res_type",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Triggered if the player has reached the commerce cap in a specific resource.",
     "notes":"works like build_placement_warning, except it is triggered if a player tries to build/research something but does not have the required technology for it."
  },
  {
     "name":"get_object_at_mouse",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Triggered if a player has an object at mouse location.",
     "notes":""
  },
  {
     "name":"get_object_type_at_mouse",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"object_type",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Triggered if a player has an object type at mouse location.",
     "notes":""
  },
  {
     "name":"get_resource_at_mouse",
     "arguments":[
        
     ],
     "return":{
        "name":"The resource ID if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Triggered if there is a rare resource at mouse location.",
     "notes":""
  },
  {
     "name":"is_mouseover_forest",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Triggered if the player\u2019s mouse is currently over a forest.",
     "notes":""
  },
  {
     "name":"is_mouseover_mountain",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Triggered if the player\u2019s mouse is currently over a forest.",
     "notes":"works like is_mouseover_forest , except it is triggered if the player\u2019s mouse is currently over a mountain."
  },
  {
     "name":"is_mouseover_oil",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Triggered if the player\u2019s mouse is currently over a forest.",
     "notes":"works like is_mouseover_forest, except it is triggered if the player\u2019s mouse is currently over oil."
  },
  {
     "name":"is_mouseover_river",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Triggered if the player\u2019s mouse is currently over a forest.",
     "notes":"works like is_mouseover_forest, except it is triggered if the player\u2019s mouse is currently over a river."
  },
  {
     "name":"get_mouse_game_x",
     "arguments":[
        
     ],
     "return":{
        "name":"The mouse game world X position if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Gets the mouse game world X position.",
     "notes":""
  },
  {
     "name":"get_mouse_game_y",
     "arguments":[
        
     ],
     "return":{
        "name":"The mouse game world X position if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Gets the mouse game world X position.",
     "notes":"works like get_mouse_game_x, except it gets the mouse game world Y position."
  },
  {
     "name":"get_mouse_screen_x",
     "arguments":[
        
     ],
     "return":{
        "name":"The mouse screen X position if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Gets the mouse screen X position.",
     "notes":""
  },
  {
     "name":"get_mouse_screen_y",
     "arguments":[
        
     ],
     "return":{
        "name":"The mouse screen X position if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Gets the mouse screen X position.",
     "notes":"works like get_mouse_screen_x, except it gets the mouse screen Y position."
  },
  {
     "name":"is_game_mouse_near",
     "arguments":[
        {
           "name":"x",
           "type":"int"
        },
        {
           "name":"y",
           "type":"int"
        },
        {
           "name":"dist_radius",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if the mouse is near a game world location.",
     "notes":""
  },
  {
     "name":"mouse_down",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Triggered when the mouse is clicked.",
     "notes":""
  },
  {
     "name":"age",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"The age (numbered 1-8) of the player if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds the current age of a player.",
     "notes":""
  },
  {
     "name":"gather_rate",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"res_type",
           "type":"string"
        }
     ],
     "return":{
        "name":"The gather rate of a resource for the player if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds the gather rate of a player for a resource.",
     "notes":""
  },
  {
     "name":"get_starting_loc_x",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"The starting game world X position of a player if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds the starting game world X position of a player.",
     "notes":""
  },
  {
     "name":"get_starting_loc_y",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"The starting game world X position of a player if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds the starting game world X position of a player.",
     "notes":"works like get_starting_loc_x, except it finds the starting game world Y position of a player."
  },
  {
     "name":"get_starting_resources",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"An integer value (associated with starting resource settings), 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds the starting resources of a player.",
     "notes":""
  },
  {
     "name":"get_starting_town_size",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"An integer value (see above) if true or success, 0 if false, -1 if false.",
        "type":"int"
     },
     "description":"Finds the size of a player\u2019s starting city.",
     "notes":""
  },
  {
     "name":"get_territory",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"An integer value representing the percentage of territory controlled by a player if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds the percentage of territory controlled by a player.",
     "notes":""
  },
  {
     "name":"get_wonder_points",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"An integer value representing the number of wonder points a player has if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds the number of wonder points a player has.",
     "notes":""
  },
  {
     "name":"is_defeated",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if a player has been defeated.",
     "notes":""
  },
  {
     "name":"max_military_unit_type",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"A string value (the unit type name) if true or success, 0 if used in an expression.",
        "type":"string"
     },
     "description":"Finds out what military unit type a player has the most of (land units only).",
     "notes":""
  },
  {
     "name":"num_buildings",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"An integer value representing the number of buildings a player has if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds the number of buildings a player has.",
     "notes":""
  },
  {
     "name":"num_cities",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"An integer value representing the number of buildings a player has if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds the number of buildings a player has.",
     "notes":"works the same as num_buildings , except it finds only the number of cities a nation has."
  },
  {
     "name":"num_civilian_buildings",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"An integer value representing the number of buildings a player has if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds the number of buildings a player has.",
     "notes":"works the same as num_buildings, except it finds only the number of civilian buildings a nation has."
  },
  {
     "name":"num_civilian_units",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"An integer value representing the number of buildings a player has if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds the number of buildings a player has.",
     "notes":"works the same as num_units, except it finds only the number of civilian units a nation has."
  },
  {
     "name":"num_military_buildings",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"An integer value representing the number of buildings a player has if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds the number of buildings a player has.",
     "notes":"works the same as num_buildings, except it finds only the number of military buildings a nation has."
  },
  {
     "name":"num_military_units",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"An integer value representing the number of buildings a player has if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds the number of buildings a player has.",
     "notes":"works the same as num_units, except it finds only the number of military units a nation has."
  },
  {
     "name":"num_rare_resources_seen",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"An integer value representing the number of rare resources seen by a player if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds how many rare resources a player has seen.",
     "notes":""
  },
  {
     "name":"num_type",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"object_type",
           "type":"string"
        }
     ],
     "return":{
        "name":"The number of a type of unit or building a player has if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds the number of a type of unit or building a nation has.",
     "notes":""
  },
  {
     "name":"num_type_upgrade",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"object_type",
           "type":"string"
        }
     ],
     "return":{
        "name":"The number of a type of unit or building a player has if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds the number of a type of unit or building a nation has.",
     "notes":"works the same as num_type , except that it finds the number of a type of unit or building a nation has, and its upgrade."
  },
  {
     "name":"num_type_with_queued",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"object_type",
           "type":"string"
        }
     ],
     "return":{
        "name":"The number of a type of unit or building a player has if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds the number of a type of unit or building a nation has.",
     "notes":"works the same as num_type , except that it finds the number of a type of unit or building a nation has, and any of the type that are queued."
  },
  {
     "name":"num_unit_category",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"unit_cat",
           "type":"string"
        }
     ],
     "return":{
        "name":"The number of units in a category that a player has if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds how many units of a category a player has.",
     "notes":""
  },
  {
     "name":"num_units",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"The number of units a player has if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds the number of units a nation has.",
     "notes":""
  },
  {
     "name":"num_units_built",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"The number of units a player has if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds the number of units a nation has.",
     "notes":"works like num_units , except it finds only the number of units a nation has built."
  },
  {
     "name":"num_units_killed",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"The number of units a player has if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds the number of units a nation has.",
     "notes":"works like num_units, except it finds only the number of units a nation has killed."
  },
  {
     "name":"num_units_lost",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"The number of units a player has if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds the number of units a nation has.",
     "notes":"works like num_units, except it finds only the number of units a nation has lost."
  },
  {
     "name":"score",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"The score of a player if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds the score of a player.",
     "notes":""
  },
  {
     "name":"any_object_at",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"x",
           "type":"int"
        },
        {
           "name":"y",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds out if any of a player\u2019s objects are at a specific location.",
     "notes":""
  },
  {
     "name":"any_object_near",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"num_objects",
           "type":"int"
        },
        {
           "name":"x",
           "type":"int"
        },
        {
           "name":"y",
           "type":"int"
        },
        {
           "name":"dist_radius",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds out if any of a player\u2019s objects are near a specific location.",
     "notes":""
  },
  {
     "name":"any_object_near_build",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"num_objects",
           "type":"int"
        },
        {
           "name":"who_build",
           "type":"int"
        },
        {
           "name":"build_o",
           "type":"int"
        },
        {
           "name":"dist_radius",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds out if any of a player\u2019s objects are near a specific building.",
     "notes":""
  },
  {
     "name":"is_object_at",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"build_o",
           "type":"int"
        },
        {
           "name":"x",
           "type":"int"
        },
        {
           "name":"y",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if an object is at a specific location.",
     "notes":""
  },
  {
     "name":"object_near",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"object_o",
           "type":"int"
        },
        {
           "name":"x",
           "type":"int"
        },
        {
           "name":"y",
           "type":"int"
        },
        {
           "name":"dist_radius",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if an object is near a specific location.",
     "notes":""
  },
  {
     "name":"object_near_build",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"object_o",
           "type":"int"
        },
        {
           "name":"who_build",
           "type":"int"
        },
        {
           "name":"build_o",
           "type":"int"
        },
        {
           "name":"dist_radius",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if an object is near a specific building.",
     "notes":""
  },
  {
     "name":"object_position_x",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"object_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"The game world X location of an object if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds the game world X position of an object.",
     "notes":""
  },
  {
     "name":"object_position_y",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"object_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"The game world X location of an object if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds the game world X position of an object.",
     "notes":"works the same as object_position_x, except it finds the game world Y position of an object."
  },
  {
     "name":"object_type",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"object_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"The type name of an object if true or success.",
        "type":"string"
     },
     "description":"Finds the type name of an object.",
     "notes":""
  },
  {
     "name":"object_type_at",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"object_type",
           "type":"string"
        },
        {
           "name":"x",
           "type":"int"
        },
        {
           "name":"y",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if a player has any object of a type at a specific location.",
     "notes":""
  },
  {
     "name":"object_type_near",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"object_type",
           "type":"string"
        },
        {
           "name":"num_objects",
           "type":"int"
        },
        {
           "name":"x",
           "type":"int"
        },
        {
           "name":"y",
           "type":"int"
        },
        {
           "name":"dist_radius",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if a player has a specific number of objects of a type near a specific location.",
     "notes":""
  },
  {
     "name":"object_type_near_build",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"object_type",
           "type":"string"
        },
        {
           "name":"num_objects",
           "type":"int"
        },
        {
           "name":"who_build",
           "type":"int"
        },
        {
           "name":"build_o",
           "type":"int"
        },
        {
           "name":"dist_radius",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if a player has a specific number of objects of a type near a specific building.",
     "notes":""
  },
  {
     "name":"object_visible",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"whose_obj",
           "type":"int"
        },
        {
           "name":"object_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if an object is visible to a player.",
     "notes":""
  },
  {
     "name":"add_goal",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"goal_id",
           "type":"string"
        },
        {
           "name":"message",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Adds a goal to the objectives dialog.",
     "notes":""
  },
  {
     "name":"clear_goals",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Clears all of a player\u2019s goals.",
     "notes":""
  },
  {
     "name":"complete_goal",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"goal_id",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Completes a goal for a player.",
     "notes":""
  },
  {
     "name":"goal_dialog_shown",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if the goal dialog has been shown since the scenario started.",
     "notes":""
  },
  {
     "name":"remove_goal",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"goal_id",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Removes a goal from the objectives dialog.",
     "notes":""
  },
  {
     "name":"reset_goal",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"goal_id",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Resets a goal from being completed.",
     "notes":""
  },
  {
     "name":"show_goal_dialog",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Shows the objectives dialog (goal dialog).",
     "notes":""
  },
  {
     "name":"add_objective",
     "arguments":[
        {
           "name":"message",
           "type":"string"
        },
        {
           "name":"obj_id",
           "type":"string"
        },
        {
           "name":"sound",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Adds a scenario objective that is displayed on the left of the screen with a checkbox beside it.",
     "notes":""
  },
  {
     "name":"add_objective_text",
     "arguments":[
        {
           "name":"message",
           "type":"string"
        },
        {
           "name":"obj_id",
           "type":"string"
        },
        {
           "name":"sound",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Adds a scenario objective that is displayed on the left of the screen (without a checkbox beside it).",
     "notes":""
  },
  {
     "name":"change_objective_text",
     "arguments":[
        {
           "name":"obj_id",
           "type":"string"
        },
        {
           "name":"message",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Changes the text displayed in a scenario objective that is displayed on the left of the screen.",
     "notes":""
  },
  {
     "name":"clear_objectives",
     "arguments":[
        {
           "name":"obj_id",
           "type":"string"
        },
        {
           "name":"message",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Changes the text displayed in a scenario objective that is displayed on the left of the screen.",
     "notes":"works like clear_goals, except it clears scenario objectives."
  },
  {
     "name":"objective_complete",
     "arguments":[
        {
           "name":"obj_id",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Checks an objective as complete.",
     "notes":""
  },
  {
     "name":"play_objective_sound",
     "arguments":[
        {
           "name":"obj_id",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Plays the sound associated with an objective.",
     "notes":""
  },
  {
     "name":"remove_objective",
     "arguments":[
        {
           "name":"obj_id",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Removes an objective.",
     "notes":""
  },
  {
     "name":"set_objective_sound",
     "arguments":[
        {
           "name":"obj_id",
           "type":"string"
        },
        {
           "name":"sound",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Sets the sound associated with an objective.",
     "notes":""
  },
  {
     "name":"clear_pings",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Clears all pings on the map.",
     "notes":""
  },
  {
     "name":"ping",
     "arguments":[
        {
           "name":"who_to",
           "type":"int"
        },
        {
           "name":"who_from",
           "type":"int"
        },
        {
           "name":"x",
           "type":"int"
        },
        {
           "name":"y",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Pings a specific location on the map from one player to another.",
     "notes":""
  },
  {
     "name":"ping_all",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"x",
           "type":"int"
        },
        {
           "name":"y",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Pings a specific location on the map from one player to all players.",
     "notes":""
  },
  {
     "name":"ping_constant",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"x",
           "type":"int"
        },
        {
           "name":"y",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Pings a specific location on the map from one player to all players.",
     "notes":"works the same as ping_all , except there is no timeout on the ping."
  },
  {
     "name":"ping_object",
     "arguments":[
        {
           "name":"who_to",
           "type":"int"
        },
        {
           "name":"who_from",
           "type":"int"
        },
        {
           "name":"whose_unit",
           "type":"int"
        },
        {
           "name":"object_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Pings a specific object from one player to another.",
     "notes":""
  },
  {
     "name":"ping_object_all",
     "arguments":[
        {
           "name":"who_from",
           "type":"int"
        },
        {
           "name":"whose_unit",
           "type":"int"
        },
        {
           "name":"object_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Pings a specific object from one player to all players.",
     "notes":""
  },
  {
     "name":"population",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"The total population of a player if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds the total population of a player.",
     "notes":""
  },
  {
     "name":"population_cap",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"The population cap of a player if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds the population cap of a player.",
     "notes":""
  },
  {
     "name":"set_population_cap",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"num",
           "type":"int"
        }
     ],
     "return":{
        "name":"The new level if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Sets the population cap of a player.",
     "notes":""
  },
  {
     "name":"get_console_player",
     "arguments":[
        
     ],
     "return":{
        "name":"Returns the ID of the player controlled at this machine if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Returns the ID of the player controlled at this machine.",
     "notes":""
  },
  {
     "name":"take_screenshot",
     "arguments":[
        {
           "name":"filename",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Takes a screenshot of current view and saves it as a specified name.",
     "notes":""
  },
  {
     "name":"find_all_military",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"A unit ID if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Works like find_unit, except that it only finds military units (both garrisoned and ungarrisoned) and only takes a who as a parameter.",
     "notes":""
  },
  {
     "name":"find_all_military_category",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"A unit ID if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Works like find_unit, except that it only finds military units (both garrisoned and ungarrisoned) and only takes a who as a parameter.",
     "notes":"works just like find_military_category, except it finds both garrisoned and ungarrisoned military units of a category."
  },
  {
     "name":"find_all_unit",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"A unit ID if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Works like find_unit, except that it only finds military units (both garrisoned and ungarrisoned) and only takes a who as a parameter.",
     "notes":"works like find_unit, except that it finds all units, both garrisoned and ungarrisoned."
  },
  {
     "name":"find_build",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"build_type",
           "type":"string"
        }
     ],
     "return":{
        "name":"A building ID if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds an ID of one of a player\u2019s buildings of a type. Multiple calls will cycle through a player\u2019s buildings of a type.",
     "notes":""
  },
  {
     "name":"find_build_at_city",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"city_name",
           "type":"string"
        },
        {
           "name":"build_type",
           "type":"string"
        }
     ],
     "return":{
        "name":"A building ID if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds an ID of one of a player\u2019s buildings of a type at a specific city. Multiple calls will cycle through a player\u2019s buildings of a type at a specific city.",
     "notes":""
  },
  {
     "name":"find_capital",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"A capital name if true or success, a blank string or 0 if false or failed.",
        "type":"string"
     },
     "description":"Finds the name of the capital of a player.",
     "notes":""
  },
  {
     "name":"find_civilian_build",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"A capital name if true or success, a blank string or 0 if false or failed.",
        "type":"string"
     },
     "description":"Finds the name of the capital of a player.",
     "notes":"works like find_build, except that it only finds civilian buildings and only takes a who as a parameter."
  },
  {
     "name":"find_idle_all_military",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"A capital name if true or success, a blank string or 0 if false or failed.",
        "type":"string"
     },
     "description":"Finds the name of the capital of a player.",
     "notes":"works like find_unit, except that it only finds idle military units (both garrisoned and ungarrisoned) and only takes a who as a parameter."
  },
  {
     "name":"find_idle_caravan",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"A capital name if true or success, a blank string or 0 if false or failed.",
        "type":"string"
     },
     "description":"Finds the name of the capital of a player.",
     "notes":"works like find_unit, except that it only finds caravans that are not garrisoned and only takes a who as a parameter."
  },
  {
     "name":"find_idle_citizen",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"A capital name if true or success, a blank string or 0 if false or failed.",
        "type":"string"
     },
     "description":"Finds the name of the capital of a player.",
     "notes":"works like find_unit, except that it only finds idle citizens that are not garrisoned and only takes a who as a parameter."
  },
  {
     "name":"find_idle_inside_military",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"A capital name if true or success, a blank string or 0 if false or failed.",
        "type":"string"
     },
     "description":"Finds the name of the capital of a player.",
     "notes":"works like find_unit, except that it only finds idle military units that are garrisoned and only takes a who as a parameter."
  },
  {
     "name":"find_idle_military",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"A capital name if true or success, a blank string or 0 if false or failed.",
        "type":"string"
     },
     "description":"Finds the name of the capital of a player.",
     "notes":"works like find_unit, except that it only finds idle military units that are not garrisoned and only takes a who as a parameter."
  },
  {
     "name":"find_inactive_build",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"A capital name if true or success, a blank string or 0 if false or failed.",
        "type":"string"
     },
     "description":"Finds the name of the capital of a player.",
     "notes":"works like find_build, except that it only finds buildings that are not fully constructed and only takes a who as a parameter."
  },
  {
     "name":"find_inside_military",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"A capital name if true or success, a blank string or 0 if false or failed.",
        "type":"string"
     },
     "description":"Finds the name of the capital of a player.",
     "notes":"works like find_unit, except that it only finds military units that are garrisoned and only takes a who as a parameter."
  },
  {
     "name":"find_inside_military_category",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"A capital name if true or success, a blank string or 0 if false or failed.",
        "type":"string"
     },
     "description":"Finds the name of the capital of a player.",
     "notes":"works just like find_military_category, except it finds only military units of a category that are garrisoned."
  },
  {
     "name":"find_inside_unit",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"A capital name if true or success, a blank string or 0 if false or failed.",
        "type":"string"
     },
     "description":"Finds the name of the capital of a player.",
     "notes":"works like find_unit, except that it only finds units that are garrisoned."
  },
  {
     "name":"find_ military",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"A capital name if true or success, a blank string or 0 if false or failed.",
        "type":"string"
     },
     "description":"Finds the name of the capital of a player.",
     "notes":"works like find_unit, except that it only finds military units that are not garrisoned."
  },
  {
     "name":"find_military_build",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"A capital name if true or success, a blank string or 0 if false or failed.",
        "type":"string"
     },
     "description":"Finds the name of the capital of a player.",
     "notes":"works like find_build, except that it only finds military buildings and only takes a who as a parameter."
  },
  {
     "name":"find_military_category",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"unit_cat",
           "type":"string"
        }
     ],
     "return":{
        "name":"A unit ID if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds an ID of one of a player\u2019s military units of a category that is not garrisoned. Multiple calls will cycle through a player\u2019s military units of a category that are not garrisoned.",
     "notes":""
  },
  {
     "name":"find_nation",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"A nation name if true or success, a blank string or 0 if false or failed.",
        "type":"string"
     },
     "description":"Finds the nation name of a player.",
     "notes":""
  },
  {
     "name":"find_unit",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"unit_type",
           "type":"string"
        }
     ],
     "return":{
        "name":"A unit ID if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds the unit ID of one of a player\u2019s units of a type that is not garrisoned. Multiple calls cycles through all of a player\u2019s units of a type that are not garrisoned.",
     "notes":""
  },
  {
     "name":"set_nation_name",
     "arguments":[
        {
           "name":"old_nation_name",
           "type":"string"
        },
        {
           "name":"new_nation_name",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Changes the name of a nation.",
     "notes":""
  },
  {
     "name":"any_object_selected",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if the player has an object of a player\u2019s selected.",
     "notes":""
  },
  {
     "name":"clear_selection",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Clears selection of whatever is selected.",
     "notes":""
  },
  {
     "name":"find_selected_id",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"The selected object ID if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds the ID of the selected object.",
     "notes":""
  },
  {
     "name":"hotkey_selection_disable",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Disallows the selection of things using hotkeys.",
     "notes":""
  },
  {
     "name":"hotkey_selection_enable",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Disallows the selection of things using hotkeys.",
     "notes":"works the same as hotkey_selection_disable , except it enables the selection of things using hotkeys."
  },
  {
     "name":"mouse_selection_disable",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Disallows the selection of things using the mouse.",
     "notes":""
  },
  {
     "name":"mouse_selection_enable",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Disallows the selection of things using the mouse.",
     "notes":"works the same as mouse_selection_disable , except it enables the selection of things using the mouse."
  },
  {
     "name":"num_objects_selected",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"The number of objects selected if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds the number of objects a player has selected.",
     "notes":""
  },
  {
     "name":"object_selected",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"object_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if a player has a specific object selected.",
     "notes":""
  },
  {
     "name":"object_type_selected",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"object_type",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if a player has an object type selected.",
     "notes":""
  },
  {
     "name":"switch_building_type",
     "arguments":[
        {
           "name":"who_receiver",
           "type":"int"
        },
        {
           "name":"who_giver",
           "type":"int"
        },
        {
           "name":"build_type",
           "type":"string"
        }
     ],
     "return":{
        "name":"num_buildings_switched = switch_building_type(1, 2, \u201cBarracks\u201d);",
        "type":"int"
     },
     "description":"Gives all of one player\u2019s buildings of a certain type (or upgrade from) to another player. Pass in a blank string to switch all their buildings.",
     "notes":""
  },
  {
     "name":"switch_teams",
     "arguments":[
        {
           "name":"who_receiver",
           "type":"int"
        },
        {
           "name":"who_giver",
           "type":"int"
        },
        {
           "name":"object_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"The new unit or building\u2019s ID if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Switches a unit or building from one player\u2019s control to another player\u2019s control.",
     "notes":""
  },
  {
     "name":"switch_unit_type",
     "arguments":[
        {
           "name":"who_receiver",
           "type":"int"
        },
        {
           "name":"who_giver",
           "type":"int"
        },
        {
           "name":"unit_type",
           "type":"string"
        }
     ],
     "return":{
        "name":"num_units_switched = switch_building_type(1, 2, \u201cUmpakati\u201d);",
        "type":"int"
     },
     "description":"Gives all of one player\u2019s units of a certain type (or upgrade from) to another player. Pass in a blank string to switch all their units.",
     "notes":""
  },
  {
     "name":"can_pay_cost",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"type",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Tests the availability of current resources to pay for a certain thing.",
     "notes":""
  },
  {
     "name":"gain_next_age",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Advances a player to the next age.",
     "notes":""
  },
  {
     "name":"gain_tech",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"tech_type",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Gives a player a technology. Can pass in the actual technology name, or pass in Military, Civics, Commerce, or Science to gain the next technology in that branch.",
     "notes":""
  },
  {
     "name":"gain_upgrade",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"type",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Gives a player an upgrade (need all prerequisites).",
     "notes":""
  },
  {
     "name":"get_current_age",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"An integer value representing the current age of a player (see list above) if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds a player\u2019s current age.",
     "notes":""
  },
  {
     "name":"get_ending_age",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"An integer value representing the current age of a player (see list above) if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds a player\u2019s current age.",
     "notes":"works the same as get_current_age , except it finds the ending age of the game."
  },
  {
     "name":"get_starting_age",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"An integer value representing the current age of a player (see list above) if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds a player\u2019s current age.",
     "notes":"works the same as get_current_age, except it finds the starting age of the game."
  },
  {
     "name":"get_techs_per_age",
     "arguments":[
        
     ],
     "return":{
        "name":"The number of technologies needed to be researched to advance to the next age if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds the number of technologies needed to be researched to advance to the next age.",
     "notes":""
  },
  {
     "name":"have_tech",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"tech_type",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if a player has a certain technology.",
     "notes":""
  },
  {
     "name":"lose_current_age",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"tech_type",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if a player has a certain technology.",
     "notes":"works the same as gain_next_age, except instead it makes a nation lose an age."
  },
  {
     "name":"lose_tech",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"tech_type",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if a player has a certain technology.",
     "notes":"works the same as gain_tech, except instead it makes a nation lose a technology."
  },
  {
     "name":"lose_upgrade",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"tech_type",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if a player has a certain technology.",
     "notes":"works the same as gain_upgrade, except instead it makes a nation lose an upgrade."
  },
  {
     "name":"research_tech_with_cost",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"tech_type",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Researches a specific technology once it can be paid for.",
     "notes":""
  },
  {
     "name":"researching_tech",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"tech_type",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if a player is researching a specific technology.",
     "notes":""
  },
  {
     "name":"researching_tech_at",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"object_o",
           "type":"int"
        },
        {
           "name":"tech_type",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if a player is researching a specific technology at a specific building.",
     "notes":""
  },
  {
     "name":"time_min",
     "arguments":[
        
     ],
     "return":{
        "name":"The game time in minutes if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds the current game time in minutes.",
     "notes":""
  },
  {
     "name":"time",
     "arguments":[
        
     ],
     "return":{
        "name":"The game time in minutes if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds the current game time in minutes.",
     "notes":"works the same as time_min."
  },
  {
     "name":"time_sec",
     "arguments":[
        
     ],
     "return":{
        "name":"The game time in minutes if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds the current game time in minutes.",
     "notes":"works the same as time_sec , except it finds the game time in seconds."
  },
  {
     "name":"get_time_limit",
     "arguments":[
        
     ],
     "return":{
        "name":"The game time limit in minutes if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds the game time limit.",
     "notes":""
  },
  {
     "name":"set_time_limit",
     "arguments":[
        {
           "name":"seconds",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Sets the game time limit (only if game is already a time limit game).",
     "notes":""
  },
  {
     "name":"set_timer",
     "arguments":[
        {
           "name":"timer_id",
           "type":"string"
        },
        {
           "name":"seconds",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Sets a timer that goes off in a certain number of seconds. Setting too many timers can cause them not to fire.",
     "notes":""
  },
  {
     "name":"stop_timer",
     "arguments":[
        {
           "name":"timer_id",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Stops a timer from expiring.",
     "notes":""
  },
  {
     "name":"timer_expired",
     "arguments":[
        {
           "name":"timer_id",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if a timer has expired.",
     "notes":""
  },
  {
     "name":"disable_tech",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"tech",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Disables a technology from being researched for a nation.",
     "notes":""
  },
  {
     "name":"disable_type",
     "arguments":[
        {
           "name":"type",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Disables a type from being used.",
     "notes":""
  },
  {
     "name":"enable_tech",
     "arguments":[
        {
           "name":"type",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Disables a type from being used.",
     "notes":"works the same as disable_tech , except it enables a technology to be researched by a nation."
  },
  {
     "name":"enable_type",
     "arguments":[
        {
           "name":"type",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Disables a type from being used.",
     "notes":"works the same as disable_type , except it enables a type to be used."
  },
  {
     "name":"find_counter_unit",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"unit_type",
           "type":"string"
        }
     ],
     "return":{
        "name":"A unit type name if true or success, a blank string or 0 if false or failed.",
        "type":"string"
     },
     "description":"Finds the counter unit to a unit type.",
     "notes":""
  },
  {
     "name":"find_current_upgrade",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"unit_type",
           "type":"string"
        }
     ],
     "return":{
        "name":"A unit type name if true or success, a blank string or 0 if false or failed.",
        "type":"string"
     },
     "description":"Finds out how far a player has researched a unit line.",
     "notes":""
  },
  {
     "name":"set_type_build_time",
     "arguments":[
        {
           "name":"type",
           "type":"string"
        },
        {
           "name":"seconds_to_build",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Sets the build time of a game type.",
     "notes":""
  },
  {
     "name":"type_build_time",
     "arguments":[
        {
           "name":"type",
           "type":"string"
        }
     ],
     "return":{
        "name":"The number of seconds to build if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds the build time of a game type.",
     "notes":""
  },
  {
     "name":"bubble_text_hide",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Hides bubble text (the giant text that pops out from buildings and units, such as \u201cBuild Caravans to generate gold\u201d).",
     "notes":""
  },
  {
     "name":"bubble_text_show",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Hides bubble text (the giant text that pops out from buildings and units, such as \u201cBuild Caravans to generate gold\u201d).",
     "notes":"works the same as bubble_text_hide , except it shows bubble text (the giant text that pops out from buildings and units, such as \u201cBuild Caravans to generate gold\u201d)."
  },
  {
     "name":"clear_highlight",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Clears the option highlight.",
     "notes":""
  },
  {
     "name":"highlight_build_option",
     "arguments":[
        {
           "name":"option",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Highlights the build menu button and a specific user interface option button.",
     "notes":""
  },
  {
     "name":"highlight_option",
     "arguments":[
        {
           "name":"option",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Highlights an option in the game a specific user interface option button.",
     "notes":""
  },
  {
     "name":"highlight_tech_option",
     "arguments":[
        {
           "name":"option",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Highlights a technology in the Library.",
     "notes":""
  },
  {
     "name":"highlight_train_option",
     "arguments":[
        {
           "name":"option",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Highlights a train unit button.",
     "notes":""
  },
  {
     "name":"is_right_click_action",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if preferences are set to right click action.",
     "notes":""
  },
  {
     "name":"ui_hide",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Hides the user interface.",
     "notes":""
  },
  {
     "name":"ui_hide_score",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Hides the score display.",
     "notes":""
  },
  {
     "name":"ui_show",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Hides the score display.",
     "notes":"works the same as ui_hide , except it shows the user interface."
  },
  {
     "name":"ui_show_score",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Hides the score display.",
     "notes":"works the same as ui_hide_score , except it shows the score display."
  },
  {
     "name":"build_menu_active",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if the citizen build menu is open.",
     "notes":""
  },
  {
     "name":"build_military_menu_active",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if the citizen build menu is open.",
     "notes":"works the same as build_menu_active , except it finds if the build military menu is open."
  },
  {
     "name":"build_option_active",
     "arguments":[
        {
           "name":"build_type",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if the specified citizen build menu option is selected.",
     "notes":""
  },
  {
     "name":"build_wonder_menu_active",
     "arguments":[
        {
           "name":"build_type",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if the specified citizen build menu option is selected.",
     "notes":"works the same as build_menu_active , except it finds if the build wonder menu is open."
  },
  {
     "name":"is_airstrike_selected",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if air strike is selected.",
     "notes":""
  },
  {
     "name":"is_move_selected",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if air strike is selected.",
     "notes":"works the same as is_airstrike_selected , except it finds if move is selected."
  },
  {
     "name":"is_on_selected",
     "arguments":[
        {
           "name":"x",
           "type":"int"
        },
        {
           "name":"y",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if a specific game world location is on screen.",
     "notes":""
  },
  {
     "name":"is_patrol_selected",
     "arguments":[
        {
           "name":"x",
           "type":"int"
        },
        {
           "name":"y",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if a specific game world location is on screen.",
     "notes":"works the same as is_airstrike_selected, except it finds if patrol is selected."
  },
  {
     "name":"is_rally_selected",
     "arguments":[
        {
           "name":"x",
           "type":"int"
        },
        {
           "name":"y",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if a specific game world location is on screen.",
     "notes":"works the same as is_airstrike_selected, except it finds if rally is selected."
  },
  {
     "name":"is_zoomed_in",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if player is zoomed in all the way.",
     "notes":""
  },
  {
     "name":"is_zoomed_out",
     "arguments":[
        
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if player is zoomed in all the way.",
     "notes":"works the same as is_zoomed_in , except it finds if a player is zoomed out all the way."
  },
  {
     "name":"find_num_idle_unit",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"unit_type",
           "type":"string"
        }
     ],
     "return":{
        "name":"The number of idle units of a type if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds the number of idle of units a player has of a certain type.",
     "notes":""
  },
  {
     "name":"garrisoned_in",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"object_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"A building ID if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds out the building ID of the building a unit is garrisoned in.",
     "notes":""
  },
  {
     "name":"home_base",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"object_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"A building ID if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds the home base of a unit (works for airplanes and missiles).",
     "notes":""
  },
  {
     "name":"is_garrisoned",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"object_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if a unit is garrisoned.",
     "notes":""
  },
  {
     "name":"is_merchant_unpacked",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"object_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if a unit is garrisoned.",
     "notes":"works like is_garrisoned , except it finds if a merchant is unpacked."
  },
  {
     "name":"is_on_transport",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"object_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if a unit is garrisoned.",
     "notes":"works like is_garrisoned , except it finds if a unit is on a transport."
  },
  {
     "name":"max_caravan_routes",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"The maximum number of caravan routes a player can have if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds the maximum number of caravan routes a player can have.",
     "notes":""
  },
  {
     "name":"num_caravan_routes",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"The maximum number of caravan routes a player can have if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds the maximum number of caravan routes a player can have.",
     "notes":"works like max_caravan_routes , only it finds the total number of current caravan routes."
  },
  {
     "name":"unit_category",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"object_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"A unit category name if true or success, 0 if false, -1 if failed.",
        "type":"string"
     },
     "description":"Finds the unit category a unit belongs to.",
     "notes":""
  },
  {
     "name":"unit_group_near",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"num_units",
           "type":"int"
        },
        {
           "name":"x",
           "type":"int"
        },
        {
           "name":"y",
           "type":"int"
        },
        {
           "name":"dist_radius",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if a player has a certain amount of units from the current group near a specific location.",
     "notes":""
  },
  {
     "name":"unit_group_near_build",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"num_units",
           "type":"int"
        },
        {
           "name":"who_build",
           "type":"int"
        },
        {
           "name":"build_o",
           "type":"int"
        },
        {
           "name":"dist_radius",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if a player has a certain amount of units from the current group near a specific building.",
     "notes":""
  },
  {
     "name":"unit_killed",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"unit_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if a specific unit has been killed.",
     "notes":""
  },
  {
     "name":"unit_type_killed",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"unit_type",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if a specific unit type has been killed.",
     "notes":""
  },
  {
     "name":"add_to_group",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"object_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Adds an object to the current group.",
     "notes":""
  },
  {
     "name":"air_base_recall_order",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"unit_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Recalls a plane back to its airbase.",
     "notes":""
  },
  {
     "name":"air_unit_return_order",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"unit_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Recalls a plane back to its airbase.",
     "notes":"works the same as air_base_recall_order , except it returns a plane to its airbase."
  },
  {
     "name":"air_unit_transfer_order",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"unit_o",
           "type":"int"
        },
        {
           "name":"object_o_target",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Returns a plane back to its airbase.",
     "notes":""
  },
  {
     "name":"citizen_repair_order",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"unit_o",
           "type":"int"
        },
        {
           "name":"build_o_target",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Gives a citizen an order to repair a building.",
     "notes":""
  },
  {
     "name":"clear_group",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Clears the current group.",
     "notes":""
  },
  {
     "name":"craft_percent",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"unit_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"The craft percent (0-100) if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds how much percentage craft a unit has left.",
     "notes":""
  },
  {
     "name":"find_target_id",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"unit_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"The targeted objects ID if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds the ID of the object that is being targeted.",
     "notes":""
  },
  {
     "name":"find_target_who",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"unit_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"The targeted objects team/player number if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds the who (player number, team) of the object that is being targeted.",
     "notes":""
  },
  {
     "name":"general_ambush",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"unit_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if failed, -1 if false.",
        "type":"int"
     },
     "description":"Makes a general use his ambush ability.",
     "notes":""
  },
  {
     "name":"general_decoy",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"unit_o",
           "type":"int"
        },
        {
           "name":"who_target",
           "type":"int"
        },
        {
           "name":"unit_o_target",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if failed, -1 if false.",
        "type":"int"
     },
     "description":"Makes a general use his decoy ability.",
     "notes":""
  },
  {
     "name":"general_entrench",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"unit_o",
           "type":"int"
        },
        {
           "name":"who_target",
           "type":"int"
        },
        {
           "name":"unit_o_target",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if failed, -1 if false.",
        "type":"int"
     },
     "description":"Makes a general use his decoy ability.",
     "notes":"works the same as general_ambush , except it makes a general use his entrench ability."
  },
  {
     "name":"general_forced_march",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"unit_o",
           "type":"int"
        },
        {
           "name":"who_target",
           "type":"int"
        },
        {
           "name":"unit_o_target",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if failed, -1 if false.",
        "type":"int"
     },
     "description":"Makes a general use his decoy ability.",
     "notes":"works the same as general_ambush , except it makes a general use his forced march ability."
  },
  {
     "name":"general_is_ambushing",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"unit_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if failed, -1 if false.",
        "type":"int"
     },
     "description":"Finds if a general is using his ambush ability.",
     "notes":""
  },
  {
     "name":"general_is_forced_marching",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"unit_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if failed, -1 if false.",
        "type":"int"
     },
     "description":"Finds if a general is using his ambush ability.",
     "notes":"works the same as general_is_ambushing , except it finds if a general is using his forced march ability."
  },
  {
     "name":"get_repeat_orders",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"unit_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if planes have repeat orders turned on.",
     "notes":""
  },
  {
     "name":"get_spell_name",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"unit_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"The spell name if true or success, a blank string or 0 if false or failed.",
        "type":"string"
     },
     "description":"Finds the name of the spell a unit is using.",
     "notes":""
  },
  {
     "name":"group_attack_order",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"who_attacked",
           "type":"int"
        },
        {
           "name":"object_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Orders the current group to attack an object. Object must be visible to nation.",
     "notes":""
  },
  {
     "name":"group_attack_to_order",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"x",
           "type":"int"
        },
        {
           "name":"y",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Orders the current group to attack to a location.",
     "notes":""
  },
  {
     "name":"group_explore_order",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"x",
           "type":"int"
        },
        {
           "name":"y",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Orders the current group to attack to a location.",
     "notes":"works the same as group_attack_to_order , except it orders the current group to explore to a location."
  },
  {
     "name":"group_guard_order",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"who_guard",
           "type":"int"
        },
        {
           "name":"object_o_guard",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Orders the current group to guard an object.",
     "notes":""
  },
  {
     "name":"group_move_order",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"who_guard",
           "type":"int"
        },
        {
           "name":"object_o_guard",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Orders the current group to guard an object.",
     "notes":"works the same as group_attack_to_order, except it orders the current group to move to a location."
  },
  {
     "name":"group_patrol_order",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"who_guard",
           "type":"int"
        },
        {
           "name":"object_o_guard",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Orders the current group to guard an object.",
     "notes":"works the same as group_attack_to_order, except it orders the current group to patrol to a location."
  },
  {
     "name":"group_stance_order",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"stance",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Orders the current group to change stance. Stances: Aggressive, Defensive, Raid and Stand Ground for military units; Build, Build and Gather, Gather and Stand for citizens.",
     "notes":""
  },
  {
     "name":"group_waypoint_order",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"x",
           "type":"int"
        },
        {
           "name":"y",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Adds a waypoint to the current groups queue.",
     "notes":""
  },
  {
     "name":"has_attack_order",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"unit_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if a unit has an attack order.",
     "notes":""
  },
  {
     "name":"has_build_order",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"unit_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if a unit has an attack order.",
     "notes":"works the same as has_attack_order , except it finds if a unit has a build order."
  },
  {
     "name":"has_cast_order",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"unit_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if a unit has an attack order.",
     "notes":"works the same as has_attack_order, except it finds if a unit has a cast order."
  },
  {
     "name":"has_follow_order",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"unit_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if a unit has an attack order.",
     "notes":"works the same as has_attack_order, except it finds if a unit has a follow order."
  },
  {
     "name":"has_gather_order",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"unit_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if a unit has an attack order.",
     "notes":"works the same as has_attack_order, except it finds if a unit has a gather order."
  },
  {
     "name":"has_move_order",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"unit_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if a unit has an attack order.",
     "notes":"works the same as has_attack_order, except it finds if a unit has a move order."
  },
  {
     "name":"has_patrol_order",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"unit_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if a unit has an attack order.",
     "notes":"works the same as has_attack_order, except it finds if a unit has a patrol order."
  },
  {
     "name":"has_repair_order",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"unit_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if a unit has an attack order.",
     "notes":"works the same as has_attack_order, except it finds if a unit has a repair order."
  },
  {
     "name":"has_target_order",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"unit_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if a unit has an attack order.",
     "notes":"works the same as has_attack_order, except it finds if a unit has a target order."
  },
  {
     "name":"is_decoy",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"unit_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if a unit is a decoy.",
     "notes":""
  },
  {
     "name":"is_entrenched",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"unit_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if a unit is a decoy.",
     "notes":"works the same as is_decoy , except it finds if a unit is entrenched."
  },
  {
     "name":"is_gathering",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"unit_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if a unit is a decoy.",
     "notes":"works the same as is_decoy, except it finds if a unit is gathering."
  },
  {
     "name":"is_idle",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"unit_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if a unit is a decoy.",
     "notes":"works the same as is_decoy, except it finds if a unit is idle."
  },
  {
     "name":"is_in_group",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"unit_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if a unit is a decoy.",
     "notes":"works the same as is_decoy, except it finds if a unit is in the current group."
  },
  {
     "name":"is_infiltrated",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"object_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if a unit is in the current group.",
     "notes":""
  },
  {
     "name":"remove_from_group",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"object_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Finds if a unit is in the current group.",
     "notes":"works the same as add_to_group, except it removes a unit from the current group."
  },
  {
     "name":"repeat_orders_disable",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"object_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Disables repeat orders at an airbase.",
     "notes":""
  },
  {
     "name":"repeat_orders_enable",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"object_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Disables repeat orders at an airbase.",
     "notes":"works the same as repeat_orders_disable , except it enables repeat orders at an airbase."
  },
  {
     "name":"special_forces_sabotage",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"unit_o",
           "type":"int"
        },
        {
           "name":"who_target",
           "type":"int"
        },
        {
           "name":"object_o_target",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Orders a special forces unit to sabotage a building or vehicle.",
     "notes":""
  },
  {
     "name":"spy_bribe",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"unit_o",
           "type":"int"
        },
        {
           "name":"who_target",
           "type":"int"
        },
        {
           "name":"unit_o_target",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Orders a spy to bribe a unit.",
     "notes":""
  },
  {
     "name":"unit_attack_ground_order",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"unit_o",
           "type":"int"
        },
        {
           "name":"who_target",
           "type":"int"
        },
        {
           "name":"unit_o_target",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Orders a spy to bribe a unit.",
     "notes":"works the same as unit_attack_to_order, except it orders a unit to attack a game world position."
  },
  {
     "name":"unit_attack_order",
     "arguments":[
        {
           "name":"who_attacker",
           "type":"int"
        },
        {
           "name":"unit_o",
           "type":"int"
        },
        {
           "name":"who_attacked",
           "type":"int"
        },
        {
           "name":"object_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Orders a unit to attack an object. The object must be visible.",
     "notes":""
  },
  {
     "name":"unit_attack_to_order",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"unit_o",
           "type":"int"
        },
        {
           "name":"x",
           "type":"int"
        },
        {
           "name":"y",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Orders a unit to attack to a game world location.",
     "notes":""
  },
  {
     "name":"unit_clear_orders",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"unit_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Clears a unit\u2019s orders.",
     "notes":""
  },
  {
     "name":"unit_explore_order",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"unit_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Clears a unit\u2019s orders.",
     "notes":"works the same as unit_attack_to_order, except it orders a unit to explore to a game world position."
  },
  {
     "name":"unit_flee_order",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"unit_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Clears a unit\u2019s orders.",
     "notes":"works the same as unit_attack_to_order, except it orders a unit to flee to a game world position."
  },
  {
     "name":"unit_move_order",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"unit_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Clears a unit\u2019s orders.",
     "notes":"works the same as unit_attack_to_order, except it orders a unit to move to a game world position."
  },
  {
     "name":"unit_patrol_order",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"unit_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Clears a unit\u2019s orders.",
     "notes":"works the same as unit_attack_to_order, except it orders a unit to patrol to a game world position."
  },
  {
     "name":"unit_stance_order",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"unit_o",
           "type":"int"
        },
        {
           "name":"stance",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Orders a unit to change stance. Stances: Aggressive, Defensive, Raid and Stand Ground for military units; Build, Build and Gather, Gather and Stand for citizens.",
     "notes":""
  },
  {
     "name":"unit_stop_effect",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"unit_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Stops an effect a unit is doing.",
     "notes":""
  },
  {
     "name":"unit_waypoint_order",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"unit_o",
           "type":"int"
        },
        {
           "name":"x",
           "type":"int"
        },
        {
           "name":"y",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Adds a waypoint to a unit\u2019s queue.",
     "notes":""
  },
  {
     "name":"train_unit",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"num",
           "type":"int"
        },
        {
           "name":"unit_type",
           "type":"string"
        }
     ],
     "return":{
        "name":"The building ID that the units are trained at if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Queues up a unit at an available building that trains that unit type.",
     "notes":""
  },
  {
     "name":"train_unit_at",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"num",
           "type":"int"
        },
        {
           "name":"unit_type",
           "type":"string"
        },
        {
           "name":"build_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"The building ID that the units are trained at if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Queues up a unit at a certain building that trains that unit type.",
     "notes":""
  },
  {
     "name":"train_unit_at_with_cost",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"num",
           "type":"int"
        },
        {
           "name":"unit_type",
           "type":"string"
        },
        {
           "name":"build_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"The building ID that the units are trained at if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Queues up a unit at a certain building that trains that unit type.",
     "notes":"works like train_unit_at , except the AI only queues up a unit at a certain building that trains that unit type if it has the resources to pay for it."
  },
  {
     "name":"train_unit_with_cost",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        },
        {
           "name":"num",
           "type":"int"
        },
        {
           "name":"unit_type",
           "type":"string"
        },
        {
           "name":"build_o",
           "type":"int"
        }
     ],
     "return":{
        "name":"The building ID that the units are trained at if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Queues up a unit at a certain building that trains that unit type.",
     "notes":"works like train_unit , except the AI only queues up a unit once it has the resources to pay for it."
  },
  {
     "name":"defeat",
     "arguments":[
        {
           "name":"who",
           "type":"int"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Defeats a player.",
     "notes":""
  },
  {
     "name":"set_defeat_message",
     "arguments":[
        {
           "name":"message_defeat",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Sets the message a player gets when defeated.",
     "notes":""
  },
  {
     "name":"set_victory_message",
     "arguments":[
        {
           "name":"message_defeat",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Sets the message a player gets when defeated.",
     "notes":"works like set_defeat_message , except it sets the message a player gets when victorious."
  },
  {
     "name":"victory",
     "arguments":[
        {
           "name":"message_defeat",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Sets the message a player gets when defeated.",
     "notes":"works like defeat , except it makes a player victorious."
  },
  {
     "name":"disable_all_triggers",
     "arguments":[
        
     ],
     "return":{
        
     },
     "description":"Disables all triggers in the script.",
     "notes":""
  },
  {
     "name":"enable_all_triggers",
     "arguments":[
        
     ],
     "return":{
        
     },
     "description":"Disables all triggers in the script.",
     "notes":"works like disable_all_triggers , except it enables all triggers in the script."
  },
  {
     "name":"is_trigger_enabled",
     "arguments":[
        {
           "name":"trigger",
           "type":"string"
        }
     ],
     "return":{
        "name":"1 if true or success, 0 if false, -1 if failed.",
        "type":"int"
     },
     "description":"Checks to see if a certain trigger is enabled.",
     "notes":""
  },
  {
     "name":"absl_int",
     "arguments":[
        {
           "name":"num_value",
           "type":"int"
        }
     ],
     "return":{
        "name":"The absolute value of the integer or floating point value if true or success.  –1 if failed.",
        "type":"int"
     },
     "description":"Takes the absolute value of an integer or a floating point value, respectively.",
     "notes":""
  },
  {
   "name":"absl_float",
   "arguments":[
      {
         "name":"real_value",
         "type":"real"
      }
   ],
      "return":{
         "name":"The absolute value of the integer or floating point value if true or success.  –1 if failed.",
         "type":"real"
      },
      "description":"Takes the absolute value of an integer or a floating point value, respectively.",
      "notes":""
  },
   {
      "name":"rand_int",
      "arguments":[
         {
            "name":"num_min",
            "type":"int"
         },
         {
            "name":"num_max",
            "type":"int"
         }
      ],
      "return":{
         "name":"An integer between num_min and num_max if true or success, -1 if failed.",
         "type":"int"
      },
      "description":"Picks a random integer between two integer values.",
      "notes":""
   },
   {
      "name":"rand_real",
      "arguments":[

      ],
      "return":{
         "name":"A floating point value between 0 and 1",
         "type":"real"
      },
      "description":"Picks a random floating point value between 0 and 1.",
      "notes":""
   },
   {
      "name":"acos",
      "arguments":[
         {
            "name":"real_num",
            "type":"real"
         }
      ],
      "return":{
         "name":"A floating point value between 0 and 1",
         "type":"real"
      },
      "description":"Evaluates the math/trig operation",
      "notes":""
   },
   {
      "name":"asin",
      "arguments":[
         {
            "name":"real_num",
            "type":"real"
         }
      ],
      "return":{
         "name":"A floating point value between 0 and 1",
         "type":"real"
      },
      "description":"Evaluates the math/trig operation",
      "notes":""
   },
   {
      "name":"atan",
      "arguments":[
         {
            "name":"real_num",
            "type":"real"
         }
      ],
      "return":{
         "name":"A floating point value between 0 and 1",
         "type":"real"
      },
      "description":"Evaluates the math/trig operation",
      "notes":""
   },
   {
      "name":"cos",
      "arguments":[
         {
            "name":"real_num",
            "type":"real"
         }
      ],
      "return":{
         "name":"A floating point value between 0 and 1",
         "type":"real"
      },
      "description":"Evaluates the math/trig operation",
      "notes":""
   },
   {
      "name":"sin",
      "arguments":[
         {
            "name":"real_num",
            "type":"real"
         }
      ],
      "return":{
         "name":"A floating point value between 0 and 1",
         "type":"real"
      },
      "description":"Evaluates the math/trig operation",
      "notes":""
   },
   {
      "name":"tan",
      "arguments":[
         {
            "name":"real_num",
            "type":"real"
         }
      ],
      "return":{
         "name":"A floating point value between 0 and 1",
         "type":"real"
      },
      "description":"Evaluates the math/trig operation",
      "notes":""
   },
   {
      "name":"sqrt",
      "arguments":[
         {
            "name":"real_num",
            "type":"real"
         }
      ],
      "return":{
         "name":"A floating point value between 0 and 1",
         "type":"real"
      },
      "description":"Evaluates the math/trig operation",
      "notes":""
   },
   {
      "name":"min_val",
      "arguments":[
         {
            "name":"real_num1",
            "type":"real"
         },
         {
            "name":"real_num2",
            "type":"real"
         }
      ],
      "return":{
         "name":"The smallest value of the two.",
         "type":"real"
      },
      "description":"Returns the minimum of two numbers.",
      "notes":""
   },
   {
      "name":"max_val",
      "arguments":[
         {
            "name":"real_num1",
            "type":"real"
         },
         {
            "name":"real_num2",
            "type":"real"
         }
      ],
      "return":{
         "name":"The largest value of the two.",
         "type":"real"
      },
      "description":"Returns the maximum of two numbers.",
      "notes":""
   }
]